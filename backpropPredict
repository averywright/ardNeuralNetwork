import numpy as np
import random
import math


def relu(x):
	if x > 0:
		return x
	else:
		return 0


def deriv(x):
	if x > 0:
		return 1
	else:
		return 0


def derivativeBias(x, y, z, g, h):
	dc = z - h
	da = deriv(np.dot(x, y) + g)
	db = dc * da
	return db


def derivativeWeights(x, y, z, g, h):
	dc = z - h
	da = deriv(np.dot(x, y) + g)
	dz = x
	dw = dz * dc * da
	return dw


weights = np.random.rand(45, 1)
counter = 0
for i in weights:
	counter += 1
	g = random.randint(0, 1)
	weights[counter - 1] += 1
	if g == 1:
		weights[counter - 1] = weights[counter - 1] * 1

bias = 7

brewersRuns = np.array(
	[.20, .12, .1, .497, .32, .1189, .1055, .159, .250, .55, .4, .43, .152, .20, .9, .109, .292, .237, .315, .419,
	 .734,
	 .20, .17, .982, .297, .360, .186, .234, .248, .482, .247, 0.7, .256, .58, .863, .319, .234, .479, .234, 0.92, .13,
	 0.7, .123, 0, .65 - 1.28977])
marlinsRuns = np.array(
	[14, 17, 4, 4.13, 31, 1169, 1041, 128, 248, 44, 7, 30, 123, 16, 5, 101, 276, .238, .314, .380, .695, 18, 27, .984,
	 29.5, 38.2, .170, .226, .311, .537, .222, 3.4, 34.3, 5.5, 90.4, 46.4, 19.8, 47.7, 30.2, 0.91, 1.1, 0.7, 11.2, 1,
	 6.5 - 12.8977])

redsRuns = np.array(
	[8, 24, 5, 4.13, 32, 1161, 1035, 132, 226, 55, 2, 26, 128, 11, 6, 96, 300, .218, .293, .351, .644, 12, 23, .989,
	 30.0, 28.0, .284, .346, .422, .769, .330, 3.2, 18.9, 7.9, 85.8, 30.8, 20.7, 48.9, 20.7, 0.98, -0.6, -0.3, -5.3, 0,
	 8 - 1.07016])
piratesRuns = np.array(
	[13, 18, 3, 3.65, 31, 1139, 1020, 113, 240, 43, 7, 25, 104, 11, 6, 103, 270, .235, .306, .365, .671, 27, 20, .975,
	 27.6, 30.2, .256, .345, .397, .742, .330, 1.4, 23.0, 12.2, 88.5, 36.7, 22.2, 34.4, 33.3, 0.53, -0.3, -0.1,
	 -5.3, 1,
	 8 - 1.07016])

astrosRuns = np.array(
	[21, 11, 1, 4.09, 32, 1195, 1055, 131, 236, 51, 3, 40, 128, 14, 6, 123, 259, .224, .306, .391, .697, 12, 28, .989,
	 29.6, 31.1, .219, .321, .412, .733, .267, 3.8, 26.0, 12.2, 89.9, 43.0, 31.3, 25.0, 30.0, 0.34, 0.1, 0.2, 2.8, 0,
	 (8 - 5.01496212)])
nationalsRuns = np.array(
	[11, 22, 5, 4.12, 33, 1223, 1101, 136, 278, 54, 1, 24, 130, 10, 5, 96, 244, .252, .317, .369, .685, 26, 21, .978,
	 29.6, 32.1, .227, .326, .294, .620, .280, 0.7, 18.8, 10.9, 87.8, 33.0, 22.3, 71.3, 4.3, 2.58, 0.5, 0.3, 5.7, 1,
	 (8 - 5.01496212)])

counter = 0
for i in brewersRuns:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		brewersRuns[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		brewersRuns[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		brewersRuns[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		brewersRuns[counter - 1] = i / 10000
counter = 0
for i in marlinsRuns:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		marlinsRuns[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		marlinsRuns[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		marlinsRuns[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		marlinsRuns[counter - 1] = i / 10000
counter = 0
for i in astrosRuns:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		astrosRuns[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		astrosRuns[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		astrosRuns[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		astrosRuns[counter - 1] = i / 10000
counter = 0
for i in redsRuns:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		redsRuns[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		redsRuns[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		redsRuns[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		redsRuns[counter - 1] = i / 10000
counter = 0
for i in piratesRuns:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		piratesRuns[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		piratesRuns[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		piratesRuns[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		piratesRuns[counter - 1] = i / 10000
counter = 0
for i in nationalsRuns:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		nationalsRuns[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		nationalsRuns[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		nationalsRuns[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		nationalsRuns[counter - 1] = i / 10000

marlinsRuns2 = np.array(
	[15, 18, 4, 4.18, 33, 1238, 1107, 138, 264, 46, 7, 34, 132, 17, 6, 105, 294, .238, .313, .385, .697, 18, 28, .985,
	 29.5, 28.2, .261, .331, .432, .763, .352, 3.2, 29.4, 7.9, 87.9, 46.1, 23.7, 38.2, 27.6, 0.63, -0.1, -0.1, -1.2, 0,
	 3.972014256666665])
counter = 0
for i in marlinsRuns2:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		marlinsRuns2[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		marlinsRuns2[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		marlinsRuns2[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		marlinsRuns2[counter - 1] = i / 10000

nationalsRuns3 = np.array(
	[12, 24, 5, 4.17, 36, 1336, 1202, 150, 304, 57, 1, 26, 143, 10, 5, 107, 267, .253, .318, .367, .685, 27, 25, .979,
	 29.6, 42.2, .221, .316, .356, .671, .266, 2.3, 21.6, 11.1, 85.4, 34.8, 20.4, 48.7, 19.5, 0.98, 1.0, 0.5, 6.8, 0,
	 -0.3973856211111109])
marlinsRuns3 = np.array(
	[15, 19, 4, 4.15, 34, 1275, 1141, 141, 269, 48, 7, 35, 135, 17, 6, 107, 308, .236, .309, .382, .691, 20, 29, .984,
	 29.5, 19.0, .316, .341, .487, .828, .323, 3.7, 12.2, 3.7, 92.9, 58.2, 17.6, 48.5, 26.5, 1.06, -0.6, -0.2, -5.3, 1,
	 -0.3973856211111109])

tigersRuns3 = np.array(
	[12, 23, 5, 2.86, 35, 1249, 1129, 100, 254, 46, 5, 16, 98, 5, 5, 99, 290, .225, .292, .317, .609, 20, 24, .984,
	 28.9, 29.2, .282, .320, .436, .756, .333, 3.2, 21.6, 4.8, 88.6, 39.6, 24.2, 41.8, 27.5, 0.72, 0.1, 0.0, -0.6, 0,
	 -0.1714285699999998])
raysRuns3 = np.array(
	[21, 14, 2, 4.17, 35, 1284, 1163, 146, 272, 55, 8, 31, 135, 29, 9, 103, 306, .234, .301, .375, .676, 19, 19, .985,
	 27.0, 10.0, .308, .349, .462, .810, .355, 2.3, 18.6, 7.0, 89.8, 40.6, 21.9, 43.8, 21.9, 0.82, 0.0, 0.0, 1.0, 1,
	 -0.1714285699999998])

yankeesRuns3 = np.array(
	[25, 9, 1, 4.91, 34, 1274, 1118, 167, 271, 47, 2, 49, 158, 21, 7, 126, 286, .242, .323, .419, .742, 13, 22, .990,
	 30.7, 17.0, .254, .297, .441, .738, .293, 4.7, 25.0, 4.7, 92.9, 45.5, 20.5, 43.2, 31.8, 0.76, 0.2, 0.1, -0.3, 0,
	 -1.919981328888889])
oriolesRuns3 = np.array(
	[14, 21, 4, 3.26, 35, 1304, 1165, 114, 266, 54, 3, 25, 109, 20, 6, 104, 319, .228, .302, .344, .647, 25, 45, .980,
	 28.1, 28.2, .259, .320, .438, .757, .325, 3.2, 25.0, 7.3, 84.8, 38.6, 24.1, 44.6, 21.7, 0.84, 0.2, 0.1, 0.9, 1,
	 -1.919981328888889])

marinersRuns3 = np.array(
	[15, 19, 4, 4.15, 34, 1275, 1141, 141, 269, 48, 7, 35, 135, 17, 6, 107, 308, .236, .309, .382, .691, 20, 29, .984,
	 29.5, 26.0, .211, .327, .432, .759, .246, 3.5, 23.7, 14.9, 92.0, 50.0, 21.4, 51.4, 21.4, 1.09, 0.0, 0.0, -0.6, 0,
	 3.141269845555554])
blueJaysRuns3 = np.array(
	[18, 17, 3, 3.71, 35, 1272, 1149, 130, 268, 57, 0, 37, 129, 15, 6, 91, 289, .233, .296, .379, .675, 16, 21, .987,
	 27.0, 34.0, .258, .309, .430, .739, .275, 3.6, 15.7, 7.1, 90.1, 45.8, 20.4, 38.9, 33.3, 0.67, 0.2, 0.2, 2.3, 1,
	 3.141269845555554])

astrosRuns3 = np.array(
	[23, 12, 1, 4.31, 35, 1315, 1163, 151, 266, 56, 4, 48, 147, 16, 6, 132, 284, .229, .309, .408, .717, 12, 30, .990,
	 29.7, 24.2, .169, .235, .303, .538, .226, 3.1, 34.7, 8.2, 91.5, 40.0, 17.9, 39.3, 28.6, 0.65, 0.8, 0.5, 6.3, 0,
	 -0.3464985966666685])
redSoxRuns3 = np.array(
	[13, 21, 5, 3.71, 34, 1276, 1154, 126, 271, 73, 2, 20, 125, 7, 5, 86, 281, .235, .290, .354, .644, 16, 23, .987,
	 28.9, 26.2, .229, .315, .302, .617, .269, 0.9, 15.6, 10.1, 87.4, 31.3, 27.5, 33.8, 23.8, 0.52, 0.4, 0.3, 3.3, 1,
	 -0.3464985966666685])

cardinalsRuns3 = np.array(
	[19, 15, 2, 4.62, 34, 1272, 1134, 157, 279, 61, 4, 32, 152, 29, 3, 110, 244, .246, .319, .392, .711, 15, 36, .988,
	 29.4, 11.0, .327, .353, .429, .782, .385, 1.9, 17.3, 3.9, 83.7, 36.6, 29.3, 39.0, 17.1, 0.73, -0.8, -0.5, -4.9, 0,
	 4.128758166666664])
metsRuns3 = np.array(
	[23, 13, 1, 4.44, 36, 1365, 1203, 160, 302, 56, 7, 29, 149, 15, 7, 121, 275, .251, .329, .382, .711, 12, 26, .991,
	 30.1, 42.1, .206, .253, .277, .530, .244, 1.2, 18.7, 4.8, 86.5, 28.5, 20.0, 50.4, 24.0, 1.02, 1.1, 0.8, 13.2, 1,
	 4.128758166666664])

bravesRuns3 = np.array(
	[16, 19, 3, 4.17, 35, 1291, 1151, 146, 262, 61, 1, 44, 137, 17, 2, 114, 334, .228, .302, .397, .699, 18, 22, .985,
	 28.6, 28.2, .231, .315, .343, .657, .338, 0.8, 30.7, 8.9, 87.5, 47.2, 29.2, 43.1, 20.8, 0.76, 0.2, 0.2, -0.3, 0,
	 2.034920637777777])
brewersRuns3 = np.array(
	[22, 13, 1, 4.89, 35, 1303, 1158, 171, 273, 57, 4, 49, 164, 24, 9, 116, 323, .236, .312, .419, .731, 22, 18, .982,
	 29.7, 30.0, .230, .326, .416, .742, .253, 3.1, 17.1, 12.4, 90.0, 42.9, 25.3, 48.4, 15.4, 0.94, 0.3, 0.1, 1.2, 1,
	 2.034920637777777])

piratesRuns3 = np.array(
	[15, 19, 3, 3.50, 34, 1234, 1105, 119, 252, 45, 7, 27, 109, 11, 6, 113, 298, .228, .300, .355, .655, 27, 23, .978,
	 27.6, 3.0, .385, .556, .385, .940, .417, 0.0, 5.6, 27.8, 87.5, 41.7, 8.3, 83.3, 0.0, 5.00, -0.2, -0.1, -1.6, 0,
	 2.361616162222225])
cubsRuns3 = np.array(
	[13, 20, 4, 3.94, 33, 1210, 1079, 130, 250, 54, 5, 25, 117, 10, 9, 108, 298, .232, .309, .361, .670, 19, 38, .984,
	 28.7, 19.2, .082, .200, .082, .282, .109, 0.0, 21.4, 12.9, 85.9, 31.1, 23.9, 45.7, 23.9, 0.84, 0.5, 0.3, 7.1, 1,
	 2.361616162222225])

angelsRuns3 = np.array(
	[24, 13, 1, 4.92, 37, 1380, 1228, 182, 302, 58, 5, 49, 176, 22, 12, 129, 337, .246, .321, .421, .742, 19, 33, .986,
	 28.5, 16.1, .220, .309, .339, .648, .256, 2.9, 22.1, 10.3, 87.4, 37.8, 22.2, 48.9, 20.0, 1.00, -0.1, -0.1,
	 -1.8, 0,
	 -0.4447174433333352])
rangersRuns3 = np.array(
	[14, 19, 4, 3.97, 33, 1199, 1088, 131, 234, 35, 3, 33, 122, 24, 8, 95, 259, .215, .281, .344, .625, 23, 26, .981,
	 29.3, 29.1, .227, .275, .318, .593, .258, 1.7, 17.5, 5.0, 87.1, 36.7, 19.8, 49.5, 23.1, 0.98, 0.7, 0.4, 6.9, 1,
	 -0.4447174433333352])

giantsRuns3 = np.array(
	[20, 13, 3, 4.94, 33, 1254, 1092, 163, 268, 43, 2, 33, 153, 20, 6, 128, 267, .245, .329, .379, .708, 16, 29, .987,
	 30.1, 27.2, .402, .433, .538, .972, .413, 1.6, 6.2, 5.4, 90.1, 43.2, 35.4, 41.6, 16.8, 0.75, -0.4, -0.3, -4.2, 0,
	 0.3653594788888892])
rockiesRuns3 = np.array(
	[17, 16, 5, 4.64, 33, 1236, 1111, 153, 289, 59, 6, 33, 143, 7, 7, 96, 260, .260, .325, .413, .738, 26, 45, .979,
	 29.6, 30.0, .274, .331, .419, .750, .337, 3.1, 23.4, 7.0, 87.5, 40.2, 27.3, 48.9, 21.6, 0.98, 0.1, 0.0, 0.7, 1,
	 0.3653594788888892])

twinsRuns3 = np.array(
	[19, 15, 1, 3.94, 34, 1245, 1106, 134, 266, 60, 1, 35, 126, 6, 6, 113, 293, .241, .318, .392, .709, 17, 24, .986,
	 27.0, 13.1, .216, .259, .392, .651, .243, 3.7, 22.2, 5.6, 89.7, 43.6, 15.4, 28.2, 38.5, 0.39, 0.2, 0.0, 4.1, 0,
	 -3.321750323333333])
athleticsRuns3 = np.array(
	[15, 21, 4, 3.36, 36, 1273, 1149, 121, 231, 49, 6, 22, 112, 22, 5, 99, 318, .201, .269, .312, .580, 25, 36, .981,
	 28.7, 22.1, .241, .330, .506, .836, .250, 6.0, 22.0, 12.0, 89.3, 45.5, 27.3, 34.8, 31.8, 0.53, -0.3, -0.2,
	 -1.7, 1,
	 -3.321750323333333])

counter = 0
for i in marlinsRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		marlinsRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		marlinsRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		marlinsRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		marlinsRuns3[counter - 1] = i / 10000

counter = 0
for i in nationalsRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		nationalsRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		nationalsRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		nationalsRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		nationalsRuns3[counter - 1] = i / 10000
counter = 0
for i in athleticsRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		athleticsRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		athleticsRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		athleticsRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		athleticsRuns3[counter - 1] = i / 10000

counter = 0
for i in twinsRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		twinsRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		twinsRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		twinsRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		twinsRuns3[counter - 1] = i / 10000
counter = 0
for i in giantsRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		giantsRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		giantsRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		giantsRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		giantsRuns3[counter - 1] = i / 10000

counter = 0
for i in rockiesRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		rockiesRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		rockiesRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		rockiesRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		rockiesRuns3[counter - 1] = i / 10000

counter = 0
for i in rangersRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		rangersRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		rangersRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		rangersRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		rangersRuns3[counter - 1] = i / 10000

counter = 0
for i in cardinalsRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		cardinalsRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		cardinalsRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		cardinalsRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		cardinalsRuns3[counter - 1] = i / 10000

counter = 0
for i in brewersRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		brewersRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		brewersRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		brewersRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		brewersRuns3[counter - 1] = i / 10000
counter = 0
for i in cubsRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		cubsRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		cubsRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		cubsRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		cubsRuns3[counter - 1] = i / 10000

counter = 0
for i in angelsRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		angelsRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		angelsRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		angelsRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		angelsRuns3[counter - 1] = i / 10000

counter = 0
for i in raysRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		raysRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		raysRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		raysRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		raysRuns3[counter - 1] = i / 10000

counter = 0
for i in metsRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		metsRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		metsRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		metsRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		metsRuns3[counter - 1] = i / 10000
counter = 0
for i in piratesRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		piratesRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		piratesRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		piratesRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		piratesRuns3[counter - 1] = i / 10000

counter = 0
for i in astrosRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		astrosRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		astrosRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		astrosRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		astrosRuns3[counter - 1] = i / 10000
counter = 0
for i in bravesRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		bravesRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		bravesRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		bravesRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		bravesRuns3[counter - 1] = i / 10000

counter = 0
for i in blueJaysRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		blueJaysRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		blueJaysRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		blueJaysRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		blueJaysRuns3[counter - 1] = i / 10000

counter = 0
for i in redSoxRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		redSoxRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		redSoxRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		redSoxRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		redSoxRuns3[counter - 1] = i / 10000

counter = 0
for i in marinersRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		marinersRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		marinersRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		marinersRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		marinersRuns3[counter - 1] = i / 10000
counter = 0
for i in yankeesRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		yankeesRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		yankeesRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		yankeesRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		yankeesRuns3[counter - 1] = i / 10000

counter = 0
for i in tigersRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		tigersRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		tigersRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		tigersRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		tigersRuns3[counter - 1] = i / 10000

counter = 0
for i in oriolesRuns3:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		oriolesRuns3[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and (i ** 2) ** .5 <= 100:
		oriolesRuns3[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		oriolesRuns3[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		oriolesRuns3[counter - 1] = i / 10000

reds = np.array(
	[9, 26, 5, 4.03, 35, 1267, 1130, 141, 244, 61, 2, 29, 137, 14, 6, 106, 318, .216, .291, .350, .641, 12, 25, .990,
	 30.0, 32.2, .260, .315, .435, .750, .271, 3.5, 14.0, 7.0, 90.0, 44.1, 26.8, 37.5, 31.3, 0.61, -0.2, -0.1, -2.1, 0,
	 -4.524963921111111])
guardians = np.array(
	[16, 17, 3, 4.76, 33, 1257, 1131, 157, 284, 58, 9, 31, 154, 18, 6, 104, 250, .251, .317, .401, .717, 18, 20, .985,
	 26.2, 17.0, .214, .290, .250, .540, .250, 0.0, 12.9, 9.7, 93.1, 52.1, 25.0, 45.8, 20.8, 0.85, 0.7, 0.1, 6.7, 1,
	 -4.524963921111111])

nationals = np.array(
	[12, 25, 5, 4.11, 37, 1373, 1235, 152, 309, 57, 1, 26, 145, 11, 5, 108, 273, .250, .315, .361, .676, 29, 28, .978,
	 29.6, 16.1, .161, .254, .214, .468, .214, 0.0, 22.2, 11.1, 91.8, 42.9, 21.4, 54.8, 23.8, 1.21, 0.1, 0.0, 4.3, 0,
	 0.8208065255555557])
marlins = np.array(
	[16, 19, 3, 4.26, 35, 1313, 1177, 149, 285, 53, 7, 36, 142, 17, 7, 110, 314, .242, .315, .391, .705, 21, 29, .983,
	 29.5, 32.0, .260, .391, .439, .830, .308, 2.7, 19.2, 15.2, 88.0, 37.9, 25.3, 43.2, 28.4, 0.79, -0.9, -0.3,
	 -8.0, 1,
	 0.8208065255555557])

padres = np.array(
	[22, 13, 2, 4.57, 35, 1332, 1154, 160, 263, 53, 7, 30, 155, 15, 6, 138, 299, .228, .316, .364, .680, 13, 28, .990,
	 28.5, 24.0, .274, .314, .400, .714, .325, 1.0, 17.7, 4.9, 82.8, 27.3, 21.8, 46.2, 25.6, 0.86, -0.3, -0.2, -0.9, 0,
	 0.8412698455555567])
phillies = np.array(
	[17, 18, 2, 4.91, 35, 1313, 1181, 172, 302, 63, 6, 44, 163, 24, 3, 105, 306, .256, .319, .431, .750, 20, 29, .984,
	 28.9, 9.0, .270, .357, .378, .736, .346, 2.4, 23.8, 11.9, 87.0, 30.8, 14.8, 48.1, 29.6, 0.93, 0.1, 0.0, 0.7, 1,
	 0.8412698455555567])

yankees = np.array(
	[26, 9, 1, 4.94, 35, 1317, 1155, 173, 282, 48, 2, 52, 164, 21, 7, 131, 296, .244, .325, .424, .749, 14, 24, .989,
	 30.7, 26.0, .279, .364, .500, .864, .287, 3.4, 11.0, 10.2, 91.4, 42.9, 22.0, 48.4, 24.2, 0.94, -0.4, -0.1,
	 -5.0, 0,
	 -2.090476185555556])
orioles = np.array(
	[14, 22, 5, 3.22, 36, 1336, 1194, 116, 269, 54, 3, 27, 111, 20, 6, 106, 330, .225, .300, .343, .643, 25, 45, .981,
	 28.1, 26.0, .279, .364, .500, .864, .287, 3.4, 11.0, 10.2, 91.4, 42.9, 22.0, 48.4, 24.2, 0.94, -0.4, -0.1,
	 -5.0, 1,
	 -2.090476185555556])

mariners = np.array(
	[16, 20, 3, 3.92, 36, 1357, 1196, 141, 277, 50, 6, 35, 136, 18, 8, 134, 299, .232, .316, .371, .687, 19, 28, .985,
	 26.9, 34.0, .292, .350, .479, .829, .316, 3.8, 15.3, 7.0, 91.1, 49.2, 34.2, 30.0, 28.3, 0.43, -0.3, 0.0, -1.8, 0,
	 3.649999995555554])
blueJays = np.array(
	[19, 17, 3, 3.78, 36, 1311, 1182, 136, 278, 57, 0, 39, 135, 15, 6, 96, 299, .235, .299, .382, .681, 17, 21, .987,
	 27.0, 38.0, .203, .281, .283, .564, .269, 2.0, 27.5, 9.2, 90.0, 46.9, 31.3, 36.5, 24.0, 0.57, 0.7, 0.5, 7.8, 1,
	 3.649999995555554])

counter = 0
for i in blueJays:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		blueJays[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and i <= 100:
		blueJays[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		blueJays[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		blueJays[counter - 1] = i / 10000

counter = 0
for i in mariners:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		mariners[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and i <= 100:
		mariners[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		mariners[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		mariners[counter - 1] = i / 10000

counter = 0
for i in orioles:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		orioles[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and i <= 100:
		orioles[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		orioles[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		orioles[counter - 1] = i / 10000
counter = 0
for i in yankees:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		yankees[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and i <= 100:
		yankees[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		yankees[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		yankees[counter - 1] = i / 10000

counter = 0
for i in phillies:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		phillies[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and i <= 100:
		phillies[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		phillies[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		phillies[counter - 1] = i / 10000

counter = 0
for i in padres:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		padres[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and i <= 100:
		padres[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		padres[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		padres[counter - 1] = i / 10000

counter = 0
for i in marlins:
	marlins += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		marlins[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and i <= 100:
		marlins[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		marlins[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		marlins[counter - 1] = i / 10000
counter = 0
for i in nationals:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		nationals[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and i <= 100:
		nationals[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		nationals[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		nationals[counter - 1] = i / 10000

counter = 0
for i in guardians:
	guardians += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		guardians[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and i <= 100:
		guardians[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		guardians[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		guardians[counter - 1] = i / 10000
counter = 0
for i in reds:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		reds[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and i <= 100:
		reds[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		reds[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		reds[counter - 1] = i / 10000

twins2 = np.array(
	[21, 16, 1, 3.84, 37, 1350, 1202, 142, 285, 63, 1, 40, 134, 7, 6, 121, 314, .237, .313, .391, .704, 17, 26, .987,
	 27.0, 35.1, .275, .307, .430, .736, .302, 2.7, 15.3, 3.3, 88.9, 38.7, 24.2, 45.0, 25.8, 0.83, -0.5, -0.2, -2.8, 0,
	 -1.86])
athletics2 = np.array(
	[16, 23, 5, 3.28, 39, 1382, 1242, 128, 251, 54, 6, 23, 119, 24, 5, 109, 334, .202, .272, .311, .583, 28, 36, .980,
	 28.7, 14.2, .204, .317, .389, .706, .258, 4.8, 31.8, 14.3, 89.8, 41.2, 11.8, 50.0, 23.5, 1.00, 0.0, 0.0, 0.7, 1,
	 -1.86])

yankees2 = np.array(
	[27, 9, 1, 4.94, 36, 1359, 1192, 178, 293, 52, 2, 54, 168, 21, 7, 135, 299, .246, .327, .429, .756, 15, 25, .989,
	 30.7, 39.0, .294, .358, .464, .822, .336, 2.9, 18.5, 8.1, 89.3, 41.1, 25.8, 42.7, 22.6, 0.77, -0.1, -0.1, -1.5, 0,
	 -1.73])
orioles2 = np.array(
	[14, 23, 5, 3.24, 37, 1373, 1229, 120, 278, 57, 3, 28, 115, 21, 6, 107, 339, .226, .299, .346, .645, 26, 46, .981,
	 28.1, 36.2, .210, .276, .362, .639, .273, 3.3, 30.3, 7.9, 89.7, 43.5, 24.7, 44.1, 26.9, 0.79, 0.5, 0.4, 6.5, 1,
	 -1.73])

whiteSox2 = np.array(
	[18, 18, 2, 3.50, 36, 1306, 1192, 126, 270, 51, 1, 32, 118, 19, 1, 81, 259, .227, .283, .352, .634, 27, 30, .979,
	 29.4, 38.1, .282, .297, .376, .673, .292, 1.3, 8.9, 1.9, 88.3, 42.4, 28.1, 37.4, 23.0, 0.60, 0.2, 0.2, 2.5, 0,
	 1.77])
royals2 = np.array(
	[13, 22, 4, 3.51, 35, 1293, 1173, 123, 264, 49, 8, 22, 113, 20, 6, 100, 266, .225, .290, .337, .626, 14, 36, .989,
	 28.8, 26.2, .221, .286, .421, .707, .296, 4.8, 35.2, 8.6, 87.8, 40.7, 25.4, 32.2, 37.3, 0.48, 0.7, 0.3, 5.7, 1,
	 1.77])

diamondbacks2 = np.array(
	[18, 20, 4, 3.61, 38, 1383, 1219, 137, 250, 54, 5, 41, 128, 16, 9, 138, 352, .205, .290, .358, .649, 31, 33, .977,
	 27.3, 41.2, .244, .297, .350, .647, .295, 1.7, 20.4, 5.8, 87.6, 42.6, 25.6, 44.0, 21.6, 0.80, 0.7, 0.4, 8.6, 0,
	 -4.21])
dodgers2 = np.array(
	[24, 12, 1, 5.50, 36, 1366, 1192, 198, 291, 71, 7, 38, 182, 19, 4, 154, 289, .244, .332, .411, .743, 19, 33, .985,
	 29.7, 35.1, .213, .290, .331, .620, .242, 2.1, 19.3, 10.3, 84.6, 29.4, 21.6, 47.1, 21.6, 0.91, 0.1, 0.1, 0.3, 1,
	 -4.21])

tigers2 = np.array(
	[13, 24, 5, 2.81, 37, 1317, 1195, 104, 267, 46, 5, 19, 102, 5, 5, 99, 308, .223, .288, .318, .606, 21, 26, .984,
	 29.0, 33.2, .185, .241, .282, .523, .221, 1.5, 20.3, 6.0, 90.4, 45.3, 22.7, 49.5, 20.6, 0.98, 0.7, 0.4, 6.4, 0,
	 -2.01])
rays2 = np.array(
	[22, 15, 2, 4.22, 37, 1355, 1227, 156, 290, 58, 8, 35, 145, 29, 10, 107, 316, .236, .302, .382, .684, 20, 21, .985,
	 27.1, 38.2, .214, .286, .366, .651, .250, 2.5, 21.0, 9.3, 86.9, 35.4, 21.2, 37.2, 32.7, 0.60, -0.2, -0.2, -2.9, 1,
	 -2.01])

counter = 0
for i in twins2:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		twins2[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and i <= 100:
		twins2[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		twins2[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		twins2[counter - 1] = i / 10000

counter = 0
for i in athletics2:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		athletics2[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and i <= 100:
		athletics2[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		athletics2[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		athletics2[counter - 1] = i / 10000

counter = 0
for i in yankees2:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		yankees2[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and i <= 100:
		yankees2[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		yankees2[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		yankees2[counter - 1] = i / 10000
counter = 0
for i in orioles2:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		orioles2[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and i <= 100:
		orioles2[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		orioles2[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		orioles2[counter - 1] = i / 10000

counter = 0
for i in whiteSox2:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		whiteSox2[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and i <= 100:
		whiteSox2[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		whiteSox2[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		whiteSox2[counter - 1] = i / 10000

counter = 0
for i in royals2:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		royals2[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and i <= 100:
		royals2[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		royals2[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		royals2[counter - 1] = i / 10000

counter = 0
for i in diamondbacks2:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		diamondbacks2[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and i <= 100:
		diamondbacks2[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		diamondbacks2[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		diamondbacks2[counter - 1] = i / 10000
counter = 0
for i in dodgers2:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		dodgers2[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and i <= 100:
		dodgers2[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		dodgers2[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		dodgers2[counter - 1] = i / 10000

counter = 0
for i in tigers2:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		tigers2[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and i <= 100:
		tigers2[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		tigers2[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		tigers2[counter - 1] = i / 10000
counter = 0
for i in rays2:
	counter += 1
	if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
		rays2[counter - 1] = i / 10
	elif (i ** 2) ** .5 >= 10 and i <= 100:
		rays2[counter - 1] = i / 100
	elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
		rays2[counter - 1] = i / 1000
	elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
		rays2[counter - 1] = i / 10000
"""

def input(x):
	counter = 0
	for i in x:
		counter += 1
		if (i ** 2) ** .5 >= 1 and (i ** 2) ** .5 <= 10:
			x[counter - 1] = i / 10
		elif (i ** 2) ** .5 >= 10 and i <= 100:
			x[counter - 1] = i / 100
		elif (i ** 2) ** .5 >= 100 and (i ** 2) ** .5 <= 1000:
			x[counter - 1] = i / 1000
		elif (i ** 2) ** .5 >= 1000 and (i ** 2) ** .5 <= 10000:
			x[counter - 1] = i / 10000
	return x
"""

def input(x):
	counter = 0
	for i in x:
		counter += 1
		if (i ** 2) ** .5 > 1 and (i ** 2) ** .5 <= 10:
			x[counter - 1] = i / 10
		elif (i ** 2) ** .5 > 10 and i <= 100:
			x[counter - 1] = i / 100
		elif (i ** 2) ** .5 > 100 and (i ** 2) ** .5 <= 1000:
			x[counter - 1] = i / 1000
		elif (i ** 2) ** .5 > 1000 and (i ** 2) ** .5 <= 10000:
			x[counter - 1] = i / 10000
	return(x)


whiteSox3 = np.array(
	[18, 19, 2, 3.46, 37, 1344, 1229, 128, 280, 53, 1, 32, 120, 19, 1, 82, 264, .228, .283, .351, .633, 28, 31, .979,
	 29.4, 26.2, .351, .423, .559, .982, .361, 3.1, 10.0, 11.5, 88.4, 40.6, 24.8, 40.6, 27.7, 0.68, -1.4, -0.6, -14.3,
	 0, 0.97])
royals3 = np.array(
	[14, 22, 4, 3.58, 36, 1330, 1207, 129, 276, 50, 9, 24, 119, 22, 7, 102, 275, .229, .292, .345, .637, 14, 36, .989,
	 28.7, 27.2, .268, .344, .491, .835, .296, 4.8, 20.0, 9.6, 91.2, 48.8, 25.3, 33.3, 34.5, 0.51, -0.2, -0.2, -3.2, 1,
	 0.97])
mariners3 = np.array(
	[17, 21, 4, 3.84, 38, 1427, 1261, 146, 293, 51, 6, 38, 141, 20, 9, 138, 311, .232, .314, .373, .687, 19, 30, .986,
	 26.9, 28.0, .229, .283, .343, .626, .268, 1.8, 18.6, 6.2, 87.1, 33.3, 23.8, 33.3, 29.8, 0.50, 0.4, 0.2, 3.5, 0,
	 1.24])
redSox3 = np.array(
	[15, 22, 4, 3.81, 37, 1387, 1255, 141, 297, 81, 3, 25, 139, 8, 5, 94, 296, .237, .292, .366, .658, 18, 25, .986,
	 28.9, 10.0, .194, .205, .278, .483, .233, 0.0, 20.5, 2.6, 94.4, 56.7, 26.7, 36.7, 33.3, 0.58, 0.2, 0.1, 1.9, 1,
	 1.24])
diamondbacks3 = np.array(
	[18, 21, 5, 3.59, 39, 1421, 1254, 140, 259, 55, 5, 41, 131, 16, 9, 141, 361, .207, .291, .356, .647, 31, 33, .977,
	 27.3, 26.1, .240, .287, .460, .747, .267, 3.7, 20.4, 6.5, 92.0, 53.2, 29.1, 44.3, 20.3, 0.80, -0.2, -0.2, -2.4, 0,
	 -1.51])
cubs3 = np.array(
	[15, 21, 4, 4.11, 36, 1322, 1178, 148, 275, 61, 5, 29, 134, 12, 9, 120, 326, .233, .312, .368, .679, 21, 42, .984,
	 28.8, 34.1, .150, .209, .208, .418, .202, 0.8, 27.1, 3.9, 85.8, 30.6, 15.3, 44.7, 29.4, 0.81, 1.5, 0.8, 14.7, 1,
	 -1.51])
rangers3 = np.array(
	[17, 19, 3, 4.28, 36, 1318, 1192, 154, 265, 40, 3, 39, 142, 26, 8, 108, 290, .222, .290, .359, .649, 24, 28, .982,
	 29.3, 40.0, .230, .320, .284, .603, .284, 0.6, 18.9, 10.1, 88.4, 34.5, 23.1, 68.4, 6.8, 2.22, 0.7, 0.4, 8.2, 0,
	 1.2])
astros3 = np.array(
	[24, 14, 1, 4.42, 38, 1426, 1266, 168, 290, 62, 4, 56, 164, 16, 6, 136, 307, .229, .307, .417, .724, 15, 32, .989,
	 29.7, 18.1, .235, .338, .456, .793, .245, 4.9, 19.8, 12.4, 89.7, 46.3, 25.9, 42.6, 24.1, 0.77, -0.2, 0.0, -2.2, 1,
	 1.2])

input(whiteSox3)
input(royals3)
input(mariners3)
input(redSox3)
input(diamondbacks3)
input(cubs3)
input(rangers3)
input(astros3)

mariners4 = np.array(
	[17, 22, 4, 3.90, 39, 1468, 1298, 152, 303, 53, 6, 40, 147, 20, 9, 142, 322, .233, .315, .376, .691, 20, 31, .985,
	 26.9, 26.0, .148, .240, .227, .467, .162, 2.0, 19.0, 11.0, 90.2, 36.8, 22.9, 45.7, 18.6, 0.84, 1.0, 0.5, 9.5, 0,
	 1.73])
redSox4 = np.array(
	[16, 22, 4, 4.03, 38, 1431, 1294, 153, 313, 85, 3, 28, 150, 9, 5, 98, 303, .242, .298, .377, .675, 18, 25, .987,
	 28.9, 48.2, .223, .300, .413, .713, .268, 3.5, 25.0, 9.0, 91.2, 42.3, 29.2, 33.8, 27.7, 0.52, -0.1, -0.2, -0.8, 1,
	 1.73])

twins4 = np.array(
	[22, 16, 1, 4.11, 38, 1400, 1240, 156, 299, 68, 1, 40, 148, 9, 6, 131, 321, .241, .320, .394, .714, 18, 26, .986,
	 27.0, 30.0, .230, .318, .381, .698, .272, 3.1, 22.5, 10.1, 90.9, 48.8, 23.5, 35.3, 29.4, 0.55, 0.2, 0.1, 2.9, 0,
	 -1.78])
royals4 = np.array(
	[14, 23, 4, 3.59, 37, 1368, 1244, 133, 287, 53, 9, 25, 123, 23, 7, 103, 279, .231, .293, .348, .641, 14, 37, .990,
	 28.7, 5.0, .176, .263, .235, .498, .200, 0.0, 10.5, 10.5, 89.9, 40.0, 20.0, 46.7, 20.0, 0.88, 0.2, 0.1, 1.6, 1,
	 -1.78])

tigers4 = np.array(
	[13, 25, 5, 2.76, 38, 1349, 1226, 105, 272, 47, 5, 20, 103, 5, 5, 100, 319, .222, .286, .317, .603, 21, 28, .984,
	 28.9, 24.2, .330, .388, .594, .983, .382, 5.0, 22.3, 6.6, 91.2, 43.9, 31.7, 24.4, 35.4, 0.33, -1.5, -0.8,
	 -15.2, 0,
	 -3.22])
guardians4 = np.array(
	[16, 19, 3, 4.66, 35, 1330, 1193, 163, 292, 59, 9, 32, 160, 20, 6, 113, 260, .245, .312, .390, .702, 20, 27, .984,
	 26.2, 39.2, .235, .272, .336, .608, .320, 1.3, 28.3, 5.0, 88.5, 36.2, 17.9, 46.2, 26.4, 0.89, 0.4, 0.0, 6.1, 1,
	 -3.22])

input(mariners4)
input(redSox4)
input(twins4)
input(royals4)
input(tigers4)
input(guardians4)

tigers6 = np.array(
	[13, 26, 5, 2.72, 39, 1380, 1255, 106, 275, 48, 5, 20, 104, 6, 5, 101, 326, .219, .282, .313, .596, 21, 29, .985,
	 28.9, 38.2, .250, .311, .399, .709, .306, 2.5, 22.1, 7.4, 89.6, 43.0, 24.6, 41.2, 25.4, 0.71, 0.4, 0.3, 3.4, 0,
	 -2.07])
guardians6 = np.array(
	[17, 19, 3, 4.69, 36, 1362, 1224, 169, 302, 62, 10, 33, 166, 20, 7, 113, 268, .247, .312, .395, .707, 21, 28, .984,
	 26.2, 15.2, .271, .313, .441, .753, .304, 3.1, 18.8, 6.3, 90.4, 43.8, 22.9, 37.5, 31.3, 0.62, 0.2, 0.0, 2.7, 1,
	 -2.07])

padres6 = np.array(
	[26, 14, 2, 4.38, 40, 1517, 1327, 175, 302, 59, 7, 32, 168, 20, 8, 148, 342, .228, .311, .355, .666, 14, 31, .990,
	 28.6, 34.1, .279, .338, .412, .750, .351, 2.7, 23.5, 6.7, 87.2, 37.6, 28.4, 51.0, 18.6, 1.06, 0.0, 0.0, 0.1, 0,
	 -0.94])
giants6 = np.array(
	[22, 17, 3, 5.05, 39, 1498, 1307, 197, 322, 59, 3, 43, 186, 21, 6, 152, 320, .246, .328, .395, .723, 19, 33, .987,
	 30.3, 29.0, .241, .305, .296, .601, .333, 0.9, 27.1, 7.6, 89.6, 47.4, 27.6, 43.4, 19.7, 0.80, 0.7, 0.5, 7.3, 1,
	 -0.94])

input(tigers6)

input(guardians6)
input(padres6)
input(giants6)

Pirate6 = np.array(
	[16, 24, 3, 3.33, 40, 1444, 1300, 133, 291, 53, 8, 32, 122, 14, 9, 127, 349, .224, .294, .351, .645, 33, 26, .977,
	 27.4, 37.1, .221, .284, .357, .641, .250, 2.6, 19.4, 8.4, 89.9, 41.1, 26.8, 45.5, 20.5, 0.84, 0.4, 0.3, 2.5, 1,
	 -0.92])
Rockie6 = np.array(
	[19, 21, 5, 4.75, 40, 1506, 1355, 190, 356, 67, 6, 40, 179, 7, 8, 116, 311, .263, .327, .410, .737, 32, 48, .979,
	 29.6, 36.0, .225, .321, .394, .715, .287, 3.1, 26.5, 11.7, 89.1, 40.4, 23.2, 41.4, 29.3, 0.71, -0.9, -0.5,
	 -8.0, 0,
	 -0.92])
Red6 = np.array(
	[12, 28, 5, 3.88, 40, 1446, 1292, 155, 282, 70, 2, 32, 150, 18, 7, 117, 359, .218, .291, .350, .641, 16, 27, .988,
	 30.0, 34.0, .288, .322, .504, .826, .318, 4.1, 17.8, 4.8, 84.0, 33.6, 15.9, 53.1, 23.9, 1.15, -0.1, 0.0, 1.1, 1,
	 -1.01])
Cubs6 = np.array(
	[16, 24, 3, 4.15, 40, 1475, 1314, 166, 305, 67, 6, 37, 152, 16, 10, 135, 359, .232, .311, .377, .687, 23, 44, .984,
	 28.8, 26.0, .317, .445, .634, 1.079, .333, 4.7, 14.8, 14.8, 87.6, 39.3, 22.6, 36.9, 29.8, 0.60, -1.0, -0.3, -12.4,
	 0, -1.01])
Yankees6 = np.array(
	[29, 12, 1, 4.76, 41, 1538, 1352, 195, 328, 58, 2, 57, 183, 22, 7, 153, 336, .243, .323, .415, .738, 17, 29, .989,
	 30.7, 46.0, .279, .337, .430, .767, .328, 2.5, 20.1, 7.0, 89.1, 40.8, 25.4, 44.4, 21.8, 0.82, -0.1, -0.1, -0.8, 1,
	 -0.13])
Orioles6 = np.array(
	[17, 25, 5, 3.50, 42, 1586, 1420, 147, 323, 65, 5, 32, 139, 23, 6, 124, 382, .227, .299, .348, .647, 32, 51, .980,
	 28.0, 43.2, .212, .268, .352, .620, .273, 2.8, 28.5, 6.7, 89.7, 43.0, 26.1, 43.5, 24.3, 0.77, 0.7, 0.6, 8.3, 0,
	 -0.13])
Nationals6 = np.array(
	[14, 28, 5, 3.98, 42, 1561, 1407, 167, 354, 66, 3, 27, 159, 12, 6, 121, 310, .252, .316, .360, .676, 32, 32, .979,
	 29.6, 35.2, .248, .281, .467, .748, .283, 4.1, 23.3, 3.4, 85.3, 30.9, 21.0, 32.4, 32.4, 0.49, 0.1, 0.0, 2.0, 1,
	 -1.58])
Dodgers6 = np.array(
	[27, 13, 1, 5.43, 40, 1525, 1334, 217, 328, 79, 7, 44, 200, 24, 5, 170, 330, .246, .332, .415, .747, 20, 39, .986,
	 29.7, 36.2, .261, .380, .444, .824, .299, 2.9, 18.1, 13.5, 87.4, 35.7, 25.9, 46.4, 25.0, 0.90, -0.8, -0.3,
	 -6.7, 0,
	 -1.58])
Braves6 = np.array(
	[19, 22, 2, 4.07, 41, 1518, 1358, 167, 304, 70, 1, 52, 156, 22, 4, 132, 394, .224, .298, .392, .690, 22, 27, .985,
	 28.5, 38.2, .234, .297, .352, .649, .314, 1.3, 26.0, 6.3, 88.0, 36.9, 26.0, 41.3, 29.8, 0.70, 0.8, 0.4, 4.5, 1,
	 -1.63])
Phillies6 = np.array(
	[19, 22, 2, 4.49, 41, 1520, 1374, 184, 341, 69, 6, 48, 173, 26, 3, 115, 366, .248, .310, .412, .722, 24, 32, .984,
	 28.9, 7.2, .258, .378, .290, .669, .308, 0.0, 13.5, 13.5, 84.1, 30.8, 26.9, 30.8, 26.9, 0.47, 0.3, 0.1, -1.4, 0,
	 -1.63])
Twins6 = np.array(
	[25, 16, 1, 4.34, 41, 1526, 1339, 178, 327, 74, 2, 41, 169, 10, 7, 150, 338, .244, .325, .394, .719, 19, 28, .987,
	 27.0, 26.1, .235, .307, .471, .778, .210, 6.1, 13.2, 9.7, 88.4, 42.0, 15.9, 37.5, 39.8, 0.60, -0.4, -0.1, -3.6, 1,
	 -1.63])
Tigers6 = np.array(
	[14, 26, 4, 2.75, 40, 1415, 1288, 110, 282, 50, 5, 21, 107, 8, 5, 103, 338, .219, .282, .314, .596, 21, 33, .985,
	 29.0, 26.1, .228, .319, .465, .784, .236, 5.2, 20.7, 12.1, 88.2, 42.3, 28.2, 34.6, 32.1, 0.53, -0.2, -0.2,
	 -0.7, 0,
	 -1.63])
Cardinals6 = np.array(
	[23, 18, 2, 4.88, 41, 1566, 1403, 200, 359, 76, 5, 39, 192, 36, 4, 130, 297, .256, .325, .401, .725, 18, 42, .988,
	 29.4, 41.0, .286, .344, .452, .797, .313, 3.3, 15.3, 7.1, 90.8, 47.1, 32.9, 30.7, 29.3, 0.45, 0.0, 0.2, 0.9, 1,
	 -0.26])
BlueJays6 = np.array(
	[22, 19, 3, 3.59, 41, 1482, 1336, 147, 311, 64, 1, 41, 146, 16, 9, 110, 332, .233, .298, .374, .672, 17, 26, .988,
	 27.0, 48.1, .215, .259, .287, .546, .257, 1.01, 18.7, 4.7, 87.2, 31.3, 22.6, 49.3, 22.6, 0.97, 1.0, 0.7, 13.1, 0,
	 -0.26])
Dbacks6 = np.array(
	[21, 22, 4, 3.81, 43, 1577, 1396, 164, 296, 60, 5, 50, 154, 18, 9, 153, 401, .212, .294, .370, .663, 33, 34, .978,
	 27.2, 44.0, .283, .301, .370, .670, .299, 1.1, 9.8, 2.2, 88.7, 44.7, 27.0, 40.9, 22.0, 0.70, 0.2, 0.2, 3.3, 1,
	 -0.39])
Royals6 = np.array(
	[14, 26, 4, 3.63, 40, 1482, 1348, 145, 313, 60, 10, 28, 135, 25, 7, 111, 300, .232, .293, .354, .647, 17, 40, .988,
	 28.6, 39.1, .233, .299, .377, .675, .261, 2.4, 18.3, 9.2, 85.2, 28.6, 23.5, 44.5, 23.5, 0.82, -0.2, -0.1, -2.6, 0,
	 -0.39])
Padres6 = np.array(
	[27, 14, 2, 4.51, 41, 1565, 1371, 185, 319, 67, 8, 32, 178, 20, 8, 151, 348, .233, .314, .363, .677, 14, 32, .991,
	 28.6, 36.1, .229, .310, .329, .639, .284, 0.6, 19.6, 10.8, 86.8, 38.5, 25.5, 48.2, 15.5, 0.96, 0.1, 0.0, -0.3, 1,
	 3.96])
Brewers6 = np.array(
	[26, 15, 1, 4.71, 41, 1526, 1353, 193, 322, 63, 5, 55, 185, 28, 9, 140, 363, .238, .315, .414, .729, 27, 24, .982,
	 29.6, 34.2, .244, .326, .449, .775, .291, 4.2, 25.0, 10.4, 88.6, 42.4, 20.7, 46.7, 27.2, 0.88, -0.1, 0.0, 2.2, 0,
	 3.96])
Mariners6 = np.array(
	[17, 25, 4, 3.90, 42, 1581, 1406, 164, 329, 59, 6, 43, 159, 21, 9, 147, 356, .234, .312, .376, .688, 20, 32, .986,
	 26.9, 17.2, .235, .288, .397, .685, .269, 2.7, 18.9, 6.8, 88.3, 40.0, 18.2, 25.5, 38.2, 0.35, 0.1, 0.0, 3.7, 1,
	 -1.23])
Athletics6 = np.array(
	[17, 26, 5, 3.26, 43, 1529, 1378, 140, 282, 61, 7, 25, 130, 25, 6, 115, 372, .205, .272, .313, .586, 30, 40, .981,
	 28.7, 38.0, .273, .343, .513, .857, .275, 4.7, 14.1, 9.4, 87.5, 40.9, 21.7, 45.0, 27.9, 0.83, -0.2, -0.2, -3.8, 0,
	 -1.23])
Giants6 = np.array(
	[22, 18, 3, 4.95, 40, 1531, 1336, 198, 326, 60, 3, 43, 187, 21, 6, 155, 329, .244, .326, .390, .716, 20, 33, .986,
	 30.3, 19.0, .194, .276, .313, .590, .235, 1.3, 21.1, 10.5, 87.7, 32.7, 19.2, 55.8, 21.2, 1.26, 0.5, 0.3, 4.1, 1,
	 5.03])
Mets6 = np.array(
	[28, 15, 1, 4.51, 43, 1630, 1441, 194, 365, 66, 8, 34, 183, 18, 8, 140, 323, .253, .328, .381, .709, 17, 30, .989,
	 30.0, 25.2, .286, .342, .410, .752, .394, 1.8, 28.1, 7.9, 84.8, 30.0, 16.4, 65.8, 15.1, 2.00, -0.3, -0.2, -7.6, 0,
	 5.03])

input(Pirate6)
input(Rockie6)
input(Red6)
input(Cubs6)
input(Yankees6)
input(Orioles6)
input(Nationals6)
input(Dodgers6)
input(Braves6)
input(Phillies6)
input(Twins6)
input(Tigers6)
input(Cardinals6)
input(BlueJays6)
input(Dbacks6)
input(Royals6)
input(Padres6)
input(Brewers6)
input(Mariners6)
input(Athletics6)
input(Giants6)
input(Mets6)

Pirates7 = input(np.array(
	[17, 24, 3, 3.29, 41, 1478, 1330, 135, 300, 56, 9, 32, 124, 15, 10, 131, 353, .226, .296, .353, .649, 35, 29, .976,
	 27.4, 42.2, .307, .364, .477, .841, .357, 2.1, 17.4, 6.7, 89.8, 41.3, 25.0, 47.9, 20.1, 0.92, -0.6, -0.3, -3.7, 1,
	 -0.27]))
Rockies7 = input(np.array(
	[19, 22, 5, 4.66, 41, 1543, 1388, 191, 363, 67, 6, 40, 179, 7, 8, 120, 316, .262, .326, .405, .731, 32, 50, .979,
	 29.6, 7.2, .148, .258, .296, .554, .188, 3.2, 32.3, 9.7, 82.9, 29.4, 17.6, 58.8, 5.9, 1.43, 0.1, 0.0, 1.7, 0,
	 -0.27]))

Reds7 = input(np.array(
	[12, 29, 5, 3.88, 41, 1480, 1324, 159, 287, 71, 2, 35, 154, 18, 7, 121, 369, .217, .291, .353, .644, 16, 27, .988,
	 30.1, 31.1, .244, .283, .454, .737, .276, 3.9, 21.9, 5.5, 91.3, 51.6, 28.0, 44.1, 20.4, 0.80, -0.3, -0.2, -2.8, 1,
	 0.01]))
Cubs7 = input(np.array(
	[17, 24, 3, 4.22, 41, 1514, 1348, 173, 313, 69, 6, 39, 159, 18, 10, 140, 372, .232, .311, .379, .690, 24, 44, .984,
	 28.8, 43.0, .232, .312, .372, .684, .294, 1.6, 23.7, 10.8, 88.5, 36.1, 20.5, 35.2, 36.1, 0.55, 0.0, -0.1, -2.1, 0,
	 0.01]))

Rays7 = input(np.array(
	[24, 17, 2, 4.39, 41, 1526, 1386, 180, 331, 63, 8, 42, 169, 34, 11, 118, 353, .239, .302, .387, .689, 25, 24, .983,
	 27.1, 46.0, .186, .236, .287, .523, .248, 1.1, 27.0, 6.2, 87.0, 31.9, 23.5, 45.4, 26.1, 0.83, 1.5, 0.8, 13.3, 1,
	 3.9]))
Marlins7 = input(np.array(
	[18, 22, 3, 4.20, 40, 1507, 1345, 168, 328, 65, 9, 40, 159, 18, 7, 123, 359, .244, .315, .395, .710, 23, 32, .984,
	 29.4, 46.1, .181, .232, .307, .539, .253, 3.4, 36.7, 5.7, 88.9, 35.6, 16.8, 56.4, 25.7, 1.30, 1.1, 0.6, 10.1, 0,
	 3.9]))

Yankees7 = input(np.array(
	[29, 13, 1, 4.74, 42, 1574, 1383, 199, 333, 58, 2, 59, 187, 22, 7, 157, 345, .241, .322, .414, .736, 18, 29, .988,
	 30.7, 41.1, .273, .320, .429, .748, .319, 2.4, 20.0, 5.9, 89.8, 43.8, 31.5, 36.3, 24.2, 0.59, 0.4, 0.2, 4.3, 1,
	 -1.15]))
Orioles7 = input(np.array(
	[18, 25, 5, 3.56, 43, 1624, 1456, 153, 332, 67, 5, 33, 145, 24, 6, 124, 393, .228, .298, .349, .647, 33, 53, .979,
	 28.0, 40.1, .243, .297, .368, .665, .282, 2.4, 19.3, 4.8, 86.9, 32.8, 22.1, 47.5, 23.0, 0.95, 0.4, 0.3, 5.8, 0,
	 -1.15]))

Nationals7 = input(np.array(
	[14, 29, 5, 3.91, 43, 1594, 1440, 168, 361, 68, 3, 27, 160, 12, 6, 121, 318, .251, .314, .358, .672, 32, 32, .979,
	 29.6, 46.2, .250, .304, .350, .654, .304, 1.6, 20.1, 6.2, 86.4, 40.6, 26.2, 45.4, 19.9, 0.84, 0.7, 0.5, 9.2, 1,
	 -1.76]))
Dodgers7 = input(np.array(
	[28, 13, 1, 5.54, 41, 1570, 1373, 227, 340, 83, 8, 44, 210, 25, 5, 175, 338, .248, .334, .416, .750, 20, 40, .986,
	 29.7, 43.1, .233, .319, .472, .790, .264, 5.0, 25.3, 9.9, 90.0, 43.0, 31.3, 23.5, 33.0, 0.31, -0.3, 0.1, -0.2, 0,
	 -1.76]))

Braves7 = input(np.array(
	[19, 23, 3, 4.05, 42, 1555, 1394, 170, 315, 72, 1, 52, 159, 22, 4, 133, 406, .226, .298, .391, .689, 22, 28, .985,
	 28.5, 43.0, .247, .299, .377, .676, .293, 2.3, 20.8, 7.3, 88.4, 36.2, 20.3, 50.8, 21.9, 1.05, -0.1, -0.1, 0.1, 1,
	 -1.82]))
Phillies7 = input(np.array(
	[20, 22, 2, 4.55, 42, 1564, 1410, 191, 351, 71, 7, 48, 180, 27, 3, 123, 377, .249, .313, .411, .724, 25, 33, .983,
	 28.9, 49.0, .239, .268, .346, .613, .295, 2.0, 23.7, 3.0, 86.1, 39.4, 25.9, 47.6, 18.9, 0.94, 0.9, 0.4, 8.9, 0,
	 -1.82]))

Twins7 = input(np.array(
	[26, 16, 1, 4.36, 42, 1561, 1370, 183, 334, 74, 2, 42, 174, 10, 7, 154, 346, .244, .325, .393, .717, 19, 28, .987,
	 27.0, 14.0, .146, .196, .292, .488, .172, 3.9, 33.3, 5.9, 91.0, 54.8, 19.4, 35.5, 41.9, 0.55, 0.1, 0.0, 3.7, 1,
	 -1.25]))
Tigers7 = input(np.array(
	[14, 27, 4, 2.78, 41, 1455, 1325, 114, 292, 53, 5, 22, 111, 8, 5, 105, 348, .220, .283, .318, .601, 21, 34, .985,
	 29.0, 20.2, .218, .299, .385, .683, .280, 3.5, 28.7, 10.3, 89.8, 41.5, 17.0, 50.9, 20.8, 1.04, 0.1, 0.1, 1.7, 0,
	 -1.25]))

Cardinals7 = input(np.array(
	[24, 18, 2, 4.93, 42, 1604, 1438, 207, 369, 78, 5, 41, 199, 37, 5, 134, 306, .257, .326, .403, .729, 18, 42, .989,
	 29.3, 50.0, .255, .264, .318, .582, .353, 0.5, 28.9, 1.5, 87.4, 38.7, 25.5, 43.8, 24.1, 0.79, 0.7, 0.5, 10.6, 1,
	 0.22]))
BlueJays7 = input(np.array(
	[22, 20, 3, 3.57, 42, 1523, 1370, 150, 315, 65, 1, 42, 149, 16, 9, 116, 338, .230, .297, .371, .668, 17, 30, .989,
	 27.0, 25.2, .182, .333, .307, .640, .233, 1.9, 24.1, 13.9, 87.6, 35.5, 17.7, 53.2, 21.0, 1.14, 0.0, 0.0, 1.4, 0,
	 0.22]))

WhiteSox7 = input(np.array(
	[21, 20, 2, 3.61, 41, 1508, 1381, 148, 326, 61, 1, 36, 140, 21, 2, 90, 304, .236, .290, .360, .650, 28, 33, .981,
	 29.4, 42.2, .222, .287, .354, .642, .265, 2.9, 23.6, 8.1, 92.4, 48.3, 29.7, 33.1, 23.7, 0.49, 0.1, -0.2, 3.7, 1,
	 2.32]))
RedSox7 = input(np.array(
	[19, 22, 4, 4.24, 41, 1543, 1396, 174, 342, 91, 4, 35, 171, 10, 5, 106, 324, .245, .300, .391, .692, 19, 28, .987,
	 28.9, 43.2, .209, .287, .325, .612, .333, 1.7, 36.8, 9.3, 86.4, 30.2, 21.6, 39.2, 32.0, 0.66, 1.0, 0.5, 9.5, 0,
	 2.32]))

Astros7 = input(np.array(
	[27, 16, 1, 4.21, 43, 1595, 1417, 181, 326, 71, 5, 58, 176, 21, 6, 152, 332, .230, .308, .410, .718, 19, 34, .987,
	 29.7, 38.2, .263, .323, .434, .758, .274, 3.6, 13.8, 7.2, 90.2, 45.0, 26.2, 38.5, 31.5, 0.63, -0.2, -0.1, -1.0, 1,
	 2.59]))
Guardians7 = input(np.array(
	[18, 20, 3, 4.66, 38, 1437, 1290, 177, 317, 64, 10, 35, 172, 22, 7, 120, 280, .246, .312, .392, .705, 22, 30, .984,
	 26.2, 47.0, .230, .315, .282, .596, .289, 0.5, 19.7, 9.6, 87.1, 33.1, 24.1, 64.2, 7.3, 1.91, 1.1, 0.7, 10.9, 0,
	 2.59]))

Angels7 = input(np.array(
	[26, 17, 2, 4.81, 43, 1608, 1432, 207, 353, 66, 5, 59, 200, 24, 13, 149, 395, .247, .321, .423, .744, 24, 37, .985,
	 28.4, 43.2, .226, .295, .372, .667, .271, 2.7, 23.5, 8.7, 86.2, 39.8, 23.6, 51.2, 22.0, 1.09, 0.5, 0.2, 5.5, 1,
	 -0.88]))
Rangers7 = input(np.array(
	[18, 22, 3, 4.03, 40, 1460, 1326, 161, 295, 44, 3, 41, 148, 27, 9, 114, 337, .222, .287, .353, .640, 25, 33, .983,
	 29.3, 30.0, .250, .302, .345, .647, .284, 1.6, 17.1, 6.2, 87.4, 36.5, 21.6, 47.4, 23.7, 0.90, 0.3, 0.1, 2.7, 0,
	 -0.88]))

Dbacks7 = input(np.array(
	[22, 22, 4, 3.93, 44, 1616, 1430, 173, 306, 62, 5, 52, 163, 18, 9, 158, 409, .214, .296, .373, .669, 35, 35, .978,
	 27.2, 8.1, .250, .390, .344, .734, .258, 0.0, 4.9, 17.1, 88.2, 48.4, 32.3, 45.2, 12.9, 0.82, -0.1, 0.0, -0.8, 1,
	 -0.02]))
Royals7 = input(np.array(
	[14, 27, 4, 3.66, 41, 1527, 1387, 150, 325, 60, 10, 31, 139, 26, 7, 116, 308, .234, .296, .359, .655, 17, 40, .989,
	 28.6, 39.1, .146, .220, .204, .424, .196, 0.7, 26.0, 5.3, 85.7, 30.6, 15.3, 48.0, 26.5, 0.92, 1.7, 0.8, 16.2, 0,
	 -0.02]))

Padres7 = input(np.array(
	[28, 14, 2, 4.48, 42, 1608, 1408, 188, 328, 69, 8, 32, 181, 20, 8, 157, 354, .233, .315, .362, .677, 14, 34, .991,
	 28.7, 51.2, .190, .239, .342, .581, .235, 4.1, 31.5, 4.1, 89.2, 42.1, 18.7, 46.3, 30.9, 0.86, 1.3, 0.8, 12.8, 1,
	 7.09]))
Brewers7 = input(np.array(
	[26, 16, 1, 4.64, 42, 1567, 1389, 195, 330, 64, 5, 55, 187, 28, 9, 145, 372, .238, .315, .410, .725, 27, 25, .982,
	 29.7, 3.2, .214, .353, .500, .853, .250, 5.9, 29.4, 17.7, 88.3, 22.2, 22.2, 33.3, 33.3, 0.50, -0.1, -0.1, -1.3, 0,
	 7.09]))

Mariners7 = input(np.array(
	[18, 25, 4, 3.98, 43, 1618, 1437, 171, 337, 60, 6, 46, 166, 21, 9, 152, 367, .235, .314, .381, .694, 20, 33, .987,
	 26.9, 18.0, .197, .303, .394, .697, .213, 4.0, 21.1, 13.2, 89.3, 34.0, 20.0, 42.0, 32.0, 0.72, 0.1, 0.0, 1.3, 1,
	 -0.59]))
Athletics7 = input(np.array(
	[17, 27, 5, 3.32, 44, 1569, 1415, 146, 294, 63, 7, 26, 136, 25, 6, 117, 379, .208, .274, .317, .591, 30, 41, .981,
	 28.7, 15.0, .259, .274, .448, .722, .277, 3.2, 17.7, 3.2, 93.0, 53.1, 20.4, 42.9, 32.7, 0.75, 0.0, 0.0, 0.1, 0,
	 -0.59]))

Giants7 = input(np.array(
	[22, 19, 3, 4.90, 41, 1566, 1369, 201, 333, 61, 3, 44, 190, 21, 6, 156, 337, .243, .324, .389, .713, 20, 34, .987,
	 30.3, 48.2, .221, .290, .354, .644, .268, 3.0, 24.5, 6.5, 84.2, 33.8, 16.5, 45.1, 26.3, 0.83, 0.8, 0.6, 8.3, 1,
	 5.11]))
Mets7 = input(np.array(
	[29, 15, 1, 4.70, 44, 1675, 1485, 207, 383, 71, 8, 37, 196, 19, 8, 141, 331, .258, .331, .391, .722, 17, 31, .989,
	 30.0, 48.1, .258, .310, .366, .676, .307, 1.0, 17.0, 6.5, 85.9, 35.8, 20.4, 57.9, 14.5, 1.42, 1.0, 0.5, 6.4, 0,
	 5.11]))

a7 = [Pirates7,
      Rockies7,

      Reds7,
      Cubs7,

      Rays7,
      Marlins7,

      Yankees7,
      Orioles7,

      Nationals7,
      Dodgers7,

      Braves7,
      Phillies7,

      Twins7,
      Tigers7,

      Cardinals7,
      BlueJays7,

      WhiteSox7,
      RedSox7,

      Astros7,
      Guardians7,

      Angels7,
      Rangers7,

      Dbacks7,
      Royals7,

      Padres7,
      Brewers7,

      Mariners7,
      Athletics7,

      Giants7,
      Mets7]

b7 = ['Pirates7',
      'Rockies7',

      'Reds7',
      'Cubs7',

      'Rays7',
      'Marlins7',

      'Yankees7',
      'Orioles7',

      'Nationals7',
      'Dodgers7',

      'Braves7',
      'Phillies7',

      'Twins7',
      'Tigers7',

      'Cardinals7',
      'BlueJays7',

      'WhiteSox7',
      'RedSox7',

      'Astros7',
      'Guardians7',

      'Angels7',
      'Rangers7',

      'Dbacks7',
      'Royals7',

      'Padres7',
      'Brewers7',

      'Mariners7',
      'Athletics7',

      'Giants7',
      'Mets7']

Nationals8 = input(np.array(
	[14, 30, 5, 3.91, 44, 1634, 1476, 172, 371, 69, 3, 27, 163, 14, 6, 125, 324, .251, .314, .357, .672, 32, 32, .980,
	 29.6, 41.0, .227, .268, .416, .684, .239, 4.3, 18.9, 4.9, 86.1, 30.3, 21.8, 37.1, 27.4, 0.61, 0.5, 0.4, 1.4, 1,
	 -1.67]))
Dodgers8 = input(np.array(
	[29, 13, 1, 5.62, 42, 1614, 1409, 236, 349, 83, 8, 48, 219, 25, 5, 182, 347, .248, .336, .420, .756, 21, 41, .986,
	 29.7, 39.2, .245, .333, .391, .724, .286, 2.9, 20.7, 12.1, 86.6, 41.9, 23.1, 44.4, 25.6, 0.81, 0.4, 0.0, 2.8, 0,
	 -1.67]))
Padres8 = input(np.array(
	[28, 15, 2, 4.40, 43, 1643, 1441, 189, 336, 69, 8, 32, 181, 20, 9, 159, 362, .233, .314, .359, .673, 15, 34, .990,
	 28.7, 28.1, .210, .325, .295, .620, .290, 1.6, 27.6, 13.8, 87.9, 32.4, 15.5, 64.8, 14.1, 1.84, 0.1, 0.1, 2.3, 1,
	 5.93]))
Brewers8 = input(np.array(
	[27, 16, 1, 4.63, 43, 1601, 1421, 199, 335, 64, 5, 57, 191, 29, 10, 147, 381, .236, .313, .408, .721, 28, 27, .982,
	 29.6, 46.0, .234, .286, .320, .606, .274, 2.1, 19.6, 5.8, 87.5, 38.8, 20.1, 41.0, 30.9, 0.70, 1.1, 0.7, 5.2, 0,
	 5.93]))
Mariners8 = input(np.array(
	[18, 26, 4, 4.00, 44, 1658, 1472, 176, 346, 61, 6, 47, 171, 21, 10, 156, 376, .235, .315, .380, .695, 21, 34, .986,
	 26.9, 42.1, .224, .258, .327, .585, .281, 0.6, 20.7, 4.3, 87.6, 43.9, 26.8, 50.4, 18.7, 1.05, 1.2, 0.6, 12.0, 1,
	 -0.82]))
Athletics8 = input(np.array(
	[18, 27, 5, 3.40, 45, 1610, 1454, 153, 307, 67, 7, 28, 142, 27, 6, 119, 390, .211, .276, .325, .601, 30, 41, .982,
	 28.7, 54.2, .223, .298, .411, .709, .270, 3.6, 25.8, 8.9, 90.8, 40.0, 29.7, 33.1, 26.9, 0.50, -0.2, -0.3, -1.3, 0,
	 -0.82]))
Reds8 = input(np.array(
	[12, 30, 5, 3.88, 42, 1518, 1359, 163, 295, 71, 2, 36, 158, 18, 7, 124, 379, .217, .291, .352, .643, 17, 27, .988,
	 30.1, 49.2, .258, .329, .479, .808, .269, 4.7, 16.5, 8.0, 87.6, 40.6, 26.9, 35.9, 25.6, 0.57, -0.6, -0.4, -3.5, 1,
	 -1.99]))
Cubs8 = input(np.array(
	[18, 24, 3, 4.38, 42, 1562, 1389, 184, 328, 69, 7, 41, 170, 19, 10, 143, 382, .236, .315, .384, .699, 24, 44, .984,
	 28.8, 15.2, .233, .281, .400, .681, .261, 3.1, 18.8, 6.3, 89.5, 41.7, 20.8, 52.1, 14.6, 1.19, -0.2, 0.0, 0.1, 0,
	 -1.99]))
Rays8 = input(np.array(
	[25, 17, 2, 4.38, 42, 1560, 1419, 184, 342, 66, 8, 45, 173, 34, 11, 119, 362, .241, .303, .394, .697, 25, 26, .983,
	 27.1, 23.0, .156, .235, .234, .469, .193, 1.2, 22.4, 9.4, 90.4, 40.4, 15.5, 58.6, 25.9, 1.42, 0.3, 0.1, 6.6, 1,
	 1.07]))
Marlins8 = input(np.array(
	[18, 23, 4, 4.10, 41, 1538, 1374, 168, 333, 65, 9, 40, 159, 18, 7, 126, 369, .242, .314, .390, .704, 23, 33, .984,
	 29.4, 38.2, .189, .237, .280, .517, .234, 1.3, 22.4, 5.3, 90.1, 43.9, 22.0, 51.4, 20.2, 1.06, 0.9, 0.6, 8.8, 0,
	 1.07]))
Yankees8 = input(np.array(
	[30, 13, 1, 4.79, 43, 1619, 1423, 206, 344, 58, 2, 63, 194, 22, 7, 161, 357, .242, .323, .418, .741, 18, 29, .989,
	 30.6, 32.2, .266, .301, .435, .736, .286, 3.7, 17.0, 4.4, 86.2, 37.1, 17.1, 38.1, 28.6, 0.63, -0.2, -0.1, -0.3, 1,
	 -1.35]))
Orioles8 = input(np.array(
	[18, 26, 5, 3.61, 44, 1664, 1496, 159, 339, 68, 5, 35, 151, 25, 6, 125, 401, .227, .296, .349, .644, 32, 55, .981,
	 28.0, 2.0, .250, .333, .250, .583, .333, 0.0, 22.2, 11.1, 89.0, 50.0, 16.7, 33.3, 50.0, 0.50, 0.1, 0.0, 1.0, 0,
	 -1.35]))
Braves8 = input(np.array(
	[20, 23, 2, 4.09, 43, 1593, 1428, 176, 329, 73, 1, 53, 165, 22, 6, 135, 419, .230, .301, .394, .696, 22, 28, .986,
	 28.5, 39.1, .269, .335, .417, .752, .311, 2.9, 19.0, 8.6, 85.7, 32.8, 20.0, 50.4, 23.2, 1.05, 0.0, 0.0, 0.5, 1,
	 -1.65]))
Phillies8 = input(np.array(
	[20, 23, 2, 4.56, 43, 1605, 1446, 196, 361, 73, 7, 49, 185, 27, 3, 127, 386, .250, .313, .411, .725, 26, 35, .983,
	 28.9, 40.0, .257, .352, .408, .760, .307, 2.2, 20.7, 10.6, 87.7, 38.1, 26.3, 34.7, 34.7, 0.54, -0.5, -0.4,
	 -4.5, 0,
	 -1.65]))
WhiteSox8 = input(np.array(
	[21, 21, 2, 3.60, 42, 1545, 1414, 151, 332, 64, 1, 37, 143, 21, 2, 94, 313, .235, .290, .360, .650, 28, 33, .981,
	 29.4, 30.0, .256, .310, .402, .711, .297, 2.4, 18.3, 6.4, 87.0, 36.2, 22.3, 34.0, 28.7, 0.52, 0.1, 0.1, 0.7, 1,
	 -0.66]))
RedSox8 = input(np.array(
	[20, 22, 4, 4.52, 42, 1594, 1441, 190, 361, 96, 4, 39, 187, 10, 5, 111, 336, .251, .306, .404, .710, 19, 28, .987,
	 28.9, 31.2, .243, .307, .435, .742, .333, 4.7, 34.7, 8.7, 88.7, 40.3, 23.6, 36.1, 36.1, 0.57, 0.7, 0.3, 6.5, 0,
	 -0.66]))
Astros8 = input(np.array(
	[28, 16, 1, 4.27, 44, 1630, 1450, 188, 335, 73, 5, 59, 183, 21, 6, 153, 341, .231, .308, .410, .718, 19, 34, .988,
	 29.7, 41.1, .231, .305, .327, .631, .258, 1.8, 15.1, 9.0, 88.0, 36.3, 20.8, 37.6, 31.2, 0.62, 0.2, 0.1, 4.3, 1,
	 1.55]))
Guardians8 = input(np.array(
	[18, 21, 3, 4.62, 39, 1472, 1324, 180, 324, 66, 10, 36, 175, 22, 7, 121, 285, .245, .310, .391, .702, 23, 30, .984,
	 26.2, 31.1, .200, .285, .318, .603, .279, 2.4, 31.5, 8.1, 88.4, 41.7, 23.6, 27.8, 38.9, 0.41, 0.5, 0.3, 5.8, 0,
	 1.55]))
Angels8 = input(np.array(
	[27, 17, 2, 4.82, 44, 1643, 1464, 212, 365, 68, 5, 60, 204, 25, 13, 150, 403, .249, .323, .426, .748, 24, 38, .985,
	 28.4, 24.1, .253, .355, .429, .784, .271, 3.7, 16.7, 12.0, 88.9, 41.3, 26.7, 37.3, 24.0, 0.61, -0.1, 0.0, -1.0, 1,
	 -0.35]))
Rangers8 = input(np.array(
	[18, 23, 3, 4.00, 41, 1493, 1358, 164, 301, 45, 3, 43, 151, 27, 9, 115, 344, .222, .286, .354, .640, 26, 36, .983,
	 29.3, 34.2, .172, .246, .344, .591, .172, 3.7, 17.9, 7.5, 90.2, 42.9, 22.4, 39.8, 31.6, 0.66, -0.2, -0.1, 3.5, 0,
	 -0.35]))

a8 = [Nationals8,
      Dodgers8,
      Padres8,
      Brewers8,
      Mariners8,
      Athletics8,
      Reds8,
      Cubs8,
      Rays8,
      Marlins8,
      Yankees8,
      Orioles8,
      Braves8,
      Phillies8,
      WhiteSox8,
      RedSox8,
      Astros8,
      Guardians8,
      Angels8,
      Rangers8]

b8 = ['Nationals8',
      'Dodgers8',
      'Padres8',
      'Brewers8',
      'Mariners8',
      'Athletics8',
      'Reds8',
      'Cubs8',
      'Rays8',
      'Marlins8',
      'Yankees8',
      'Orioles8',
      'Braves8',
      'Phillies8',
      'WhiteSox8',
      'RedSox8',
      'Astros8',
      'Guardians8',
      'Angels8',
      'Rangers8']

Reds9 = input(np.array([13,30,5,3.88,43,1551,1390,167,302,71,3,37,162,19,7,126,387,.217,.291,.353,.643,17,27,.988,30.1,33.0,.236,.322,.299,.621,.322,0.7,26.0,11.6,87.6,35.6,27.5,46.2,23.1,0.86,0.0,-0.1,1.2,1,-2.3]))
Cubs9 = input(np.array([18,25,3,4.35,43,1599,1421,187,333,71,7,41,173,20,10,147,390,.234,.314,.381,.694,24,44,.984,28.8,39.1,.232,.330,.497,.826,.255,6.7,27.9,12.3,89.8,39.6,21.7,30.2,44.3,0.43,0.1,0.0,-1.2,0,-2.3]))
Rays9 = input(np.array([26,17,2,4.40,43,1593,1448,189,349,69,8,46,178,34,11,123,371,.241,.304,.395,.699,27,28,.983,27.1,45.0,.180,.237,.304,.541,.248,2.3,32.4,6.4,88.7,37.1,25.7,38.1,27.6,0.62,1.6,1.1,12.9,1,2.58]))
Yankees9 = input(np.array([31,13,1,4.73,44,1649,1453,208,350,59,2,63,195,23,7,161,362,.241,.321,.414,.735,19,29,.988,30.6,15.0,.295,.380,.393,.774,.347,1.4,16.9,9.9,85.7,37.0,26.0,30.0,28.0,0.43,0.0,0.0,-0.7,0,2.58]))
Nationals9 = input(np.array([15,30,5,3.84,45,1664,1503,173,377,71,3,27,164,14,7,128,329,.251,.314,.356,.670,31,33,.981,29.6,44.0,.315,.359,.533,.891,.362,4.0,19.6,6.0,89.7,48.3,23.8,50.3,21.1,1.03,-1.0,-0.6,-10.9,1,-0.31]))
Rockies9 = input(np.array([20,23,5,4.60,43,1622,1462,198,383,70,6,41,186,8,8,125,333,.262,.326,.402,.728,33,50,.979,29.6,43.2,.295,.372,.464,.836,.345,2.9,18.8,9.7,90.3,47.6,26.2,45.5,23.4,0.85,-1.0,-0.4,-12.5,0,-0.31]))
Tigers9 = input(np.array([15,28,4,2.74,43,1531,1393,118,305,54,5,25,115,9,5,112,369,.219,.283,.319,.601,22,36,.985,28.9,8.2,.156,.250,.188,.438,.238,0.0,30.6,11.1,89.4,42.9,9.5,52.4,38.1,1.10,0.0,0.0,2.2,1,-3.15]))
Guardians9 = input(np.array([18,22,3,4.53,40,1506,1355,181,328,67,10,36,175,22,7,124,297,.242,.308,.386,.694,24,32,.983,26.2,44.2,.235,.269,.337,.606,.322,1.1,28.4,4.6,89.2,39.3,19.5,47.5,24.6,0.93,0.7,0.1,8.8,0,-3.15]))
Braves9 = input(np.array([21,23,2,4.18,44,1634,1462,184,342,75,1,56,172,22,6,142,431,.234,.306,.402,.708,22,28,.986,28.5,52.1,.219,.272,.411,.683,.277,4.4,30.9,4.8,88.8,36.7,15.5,51.2,27.9,1.06,0.5,0.2,3.5,1,-1.35]))
Phillies9 = input(np.array([20,24,3,4.55,44,1646,1483,200,372,75,7,50,189,27,3,130,395,.251,.315,.412,.727,27,37,.983,28.9,47.0,.206,.286,.282,.568,.295,1.1,29.5,8.4,88.0,35.4,22.8,50.9,21.1,1.04,1.0,0.5,9.1,0,-1.35]))
Twins9 = input(np.array([27,17,1,4.25,44,1636,1438,187,349,77,2,43,178,10,7,160,367,.243,.323,.389,.712,20,30,.987,27.0,33.2,.240,.322,.380,.702,.278,2.7,20.8,10.1,91.2,47.0,24.8,36.6,27.7,0.58,0.0,0.0,0.7,1,1.19]))
Royals9 = input(np.array([14,28,5,3.71,42,1564,1421,156,334,63,10,32,145,26,8,119,315,.235,.297,.361,.658,17,42,.989,28.6,10.1,.229,.282,.314,.596,.235,0.0,5.1,7.7,85.5,32.4,17.6,55.9,20.6,1.27,0.4,0.3,3.5,0,1.19]))
Cardinals9 = input(np.array([24,19,2,4.84,43,1642,1472,208,375,80,5,41,200,36,5,137,318,.255,.324,.399,.723,20,42,.988,29.3,41.2,.204,.247,.382,.628,.261,4.3,32.9,4.9,88.1,42.4,27.3,32.3,29.3,0.50,0.8,0.6,9.1,1,1.22]))
Brewers9 = input(np.array([28,16,1,4.57,44,1633,1448,201,339,65,5,57,193,30,11,151,391,.234,.312,.404,.716,28,27,.982,29.7,47.0,.224,.296,.347,.643,.260,2.1,19.1,9.5,87.0,28.1,19.3,50.4,25.9,1.01,0.6,0.4,7.5,0,1.22]))
WhiteSox9 = input(np.array([22,21,2,3.58,43,1577,1443,154,336,65,1,38,146,21,2,97,317,.233,.289,.358,.647,28,34,.982,29.4,30.2,.162,.258,.276,.535,.173,2.5,18.3,11.7,90.3,35.8,23.8,44.0,17.9,0.79,1.1,0.5,9.8,1,-2.53]))
RedSox9 = input(np.array([20,23,4,4.44,43,1634,1474,191,368,96,4,39,188,10,5,118,346,.250,.307,.400,.707,20,29,.987,28.9,30.0,.323,.403,.454,.857,.342,2.7,10.7,12.1,87.5,31.6,24.3,54.8,17.4,1.21,-0.6,-0.4,-12.4,0,-2.53]))
Angels9 = input(np.array([27,18,2,4.76,45,1677,1496,214,371,69,5,60,206,26,13,152,413,.248,.321,.421,.742,24,38,.985,28.4,18.0,.288,.316,.548,.864,.305,4.0,14.5,4.0,91.7,48.4,24.2,45.2,24.2,0.85,0.0,0.0,-1.6,1,0.32]))
BlueJays9 = input(np.array([23,20,3,3.67,43,1572,1408,158,327,67,2,45,157,16,9,124,342,.232,.301,.379,.680,17,30,.989,27.0,38.1,.205,.256,.322,.578,.300,1.9,34.0,5.8,87.2,33.7,25.8,37.6,29.0,0.60,0.7,0.5,9.1,0,0.32]))
Dbacks9 = input(np.array([23,22,4,4.02,45,1654,1460,181,315,64,5,56,170,18,9,166,420,.216,.299,.382,.681,35,37,.978,27.2,11.2,.250,.320,.455,.775,.300,4.0,26.0,8.0,89.4,43.8,25.0,37.5,28.1,0.60,-0.2,-0.2,-1.3,1,-4.08]))
Dodgers9 = input(np.array([29,14,1,5.49,43,1650,1441,236,355,85,8,48,219,27,5,186,356,.246,.335,.416,.751,21,42,.986,29.7,35.2,.250,.304,.417,.721,.267,3.4,17.5,6.0,89.3,36.9,23.6,39.1,27.3,0.65,0.1,0.1,-0.6,0,-4.08]))
Athletics9 = input(np.array([19,27,4,3.41,46,1647,1489,157,316,70,7,30,146,30,6,121,402,.212,.277,.329,.606,29,45,.983,28.7,49.1,.216,.274,.273,.546,.275,0.0,19.9,6.3,88.4,36.2,17.3,54.7,23.0,1.23,1.6,0.7,13.4,1,1.5]))
Rangers9 = input(np.array([19,23,3,4.07,42,1532,1393,171,311,46,4,45,158,31,9,117,350,.223,.286,.359,.645,26,37,.983,29.3,50.2,.205,.260,.346,.606,.256,3.0,27.4,6.5,87.7,39.4,20.5,47.0,21.2,0.91,0.8,0.5,6.6,0,1.5]))

a9 = [Reds9,
Cubs9,
Rays9,
Yankees9,
Nationals9,
Rockies9,
Tigers9,
Guardians9,
Braves9,
Phillies9,
Twins9,
Royals9,
Cardinals9,
Brewers9,
WhiteSox9,
RedSox9,
Angels9,
BlueJays9,
Dbacks9,
Dodgers9,
Athletics9,
Rangers9]

b9 = ['Reds9',
'Cubs9',
'Rays9',
'Yankees9',
'Nationals9',
'Rockies9',
'Tigers9',
'Guardians9',
'Braves9',
'Phillies9',
'Twins9',
'Royals9',
'Cardinals9',
'Brewers9',
'WhiteSox9',
'RedSox9',
'Angels9',
'BlueJays9',
'Dbacks9',
'Dodgers9',
'Athletics9',
'Rangers9']
Reds10 = input(np.array([14,30,5,4.25,44,1600,1428,187,322,74,4,39,182,19,8,133,391,.225,.299,.365,.664,18,28,.988,30.1,44.2,.216,.293,.315,.608,.333,1.1,34.1,9.3,86.7,41.2,26.5,35.3,27.5,0.55,0.7,0.4,6.3,1,-3.49]))
Giants10 = input(np.array([24,19,3,5.19,43,1651,1443,223,360,67,3,52,212,21,7,167,357,.249,.331,.408,.739,20,34,.987,30.3,4.1,.222,.333,.278,.611,.267,0.0,14.3,9.5,84.1,40.0,6.7,73.3,13.3,2.75,0.0,0.0,-0.3,0,-3.49]))
Nationals10 = input(np.array([16,30,5,3.91,46,1702,1534,180,386,74,4,27,171,15,7,133,332,.252,.316,.358,.673,33,36,.980,29.6,46.0,.253,.304,.410,.714,.281,3.3,18.7,7.1,88.0,35.8,24.4,46.7,23.7,0.91,0.2,0.1,4.3,1,-1.5]))
Rockies10 = input(np.array([20,24,5,4.57,44,1658,1496,201,391,72,7,41,189,9,8,127,337,.261,.325,.401,.726,34,51,.979,29.6,27.2,.355,.397,.564,.960,.362,4.1,10.7,6.6,92.9,55.6,17.0,52.0,24.0,1.21,-0.7,-0.2,-7.0,0,-1.5]))
RedSox10 = input(np.array([21,23,4,4.70,44,1685,1520,207,387,100,4,42,202,11,5,123,358,.255,.312,.409,.720,20,29,.987,28.9,26.2,.286,.339,.500,.839,.328,5.5,24.8,7.3,92.5,42.5,23.3,42.5,30.1,0.74,-0.2,0.0,-4.2,1, -3.13]))
Orioles10 = input(np.array([18,27,5,3.53,45,1701,1529,159,344,68,5,35,151,26,6,128,412,.225,.294,.345,.639,33,55,.980,28.0,32.2,.222,.283,.365,.648,.289,2.9,29.0,7.3,90.9,38.4,20.7,43.7,23.0,0.78,0.5,0.4,3.9,0,-3.13]))
Tigers10 = input(np.array([16,28,4,2.77,44,1570,1426,122,314,56,5,25,119,9,5,116,379,.220,.285,.319,.604,23,36,.985,28.9,45.2,.247,.307,.385,.692,.315,2.1,24.1,7.3,89.9,42.3,26.9,41.5,23.8,0.72,0.5,0.3,4.1,1,-2.61]))
Guardians10 = input(np.array([18,23,3,4.49,41,1541,1389,184,336,69,10,36,178,22,7,125,303,.242,.307,.384,.691,24,32,.984,26.2,21.0,.278,.326,.443,.769,.302,3.5,16.3,7.0,90.6,40.9,24.2,39.4,28.8,0.67,0.3,0.1,3.3,0,-2.61]))
Mets10 = input(np.array([29,17,1,4.83,46,1758,1559,222,406,75,11,39,211,20,8,146,345,.260,.332,.398,.730,17,33,.989,30.0,12.0,.277,.300,.511,.811,.282,4.0,14.0,4.0,88.8,37.5,17.1,36.6,39.0,0.58,-0.1,-0.1,0.7,1,2.15]))
Phillies10 = input(np.array([21,24,2,4.53,45,1681,1515,204,378,77,7,51,193,27,3,132,402,.250,.313,.411,.724,27,37,.983,28.9,46.1,.257,.295,.369,.663,.312,1.6,20.5,3.7,87.5,36.4,27.0,41.1,23.4,0.72,0.6,0.4,6.7,0,2.15]))
Rays10 = input(np.array([26,18,2,4.34,44,1627,1481,191,355,70,8,46,180,34,11,124,377,.240,.302,.391,.692,29,28,.982,27.1,42.2,.263,.291,.425,.717,.308,2.3,19.1,2.8,87.2,35.8,22.1,42.6,21.3,0.77,0.5,0.4,7.6,1,2.52]))
Yankees10 = input(np.array([32,13,1,4.78,45,1688,1485,215,356,60,2,63,199,24,7,166,368,.240,.321,.410,.731,20,30,.988,30.6,27.1,.163,.222,.228,.450,.219,1.0,27.0,7.0,85.9,32.3,21.5,44.6,23.1,0.81,0.7,0.4,9.3,0,2.52]))
Braves10 = input(np.array([21,24,2,4.11,45,1668,1494,185,347,77,1,56,172,22,6,143,442,.232,.304,.398,.702,22,29,.986,28.5,36.1,.276,.344,.476,.819,.318,3.7,20.9,9.2,87.7,35.4,27.4,38.9,25.7,0.66,-0.1,-0.1,-2.3,1,3.82]))
Marlins10 = input(np.array([18,24,4,4.10,42,1577,1409,172,343,67,9,41,163,18,7,130,381,.243,.315,.391,.706,23,34,.985,29.5,42.0,.231,.315,.388,.702,.262,2.2,17.1,11.1,89.0,40.8,24.6,46.2,17.7,0.86,0.4,0.2,2.9,0,3.82]))
Twins10 = input(np.array([27,18,1,4.20,45,1677,1477,189,361,78,2,43,180,10,7,162,377,.244,.324,.387,.711,20,31,.987,27.0,50.2,.217,.263,.342,.605,.230,2.5,14.6,6.0,88.7,40.5,21.5,51.3,20.9,1.07,0.5,0.3,7.0,1,0.18]))
Royals10 = input(np.array([15,28,5,3.70,43,1599,1453,159,340,65,10,32,148,26,8,122,322,.234,.296,.359,.655,18,42,.988,28.6,24.2,.237,.277,.344,.621,.274,2.0,19.8,5.9,88.6,33.3,29.3,25.3,38.7,0.34,0.4,0.3,4.1,0,0.18]))
Cardinals10 = input(np.array([24,20,2,4.80,44,1682,1505,211,382,81,5,42,203,36,5,143,322,.254,.324,.398,.722,21,43,.987,29.3,39.2,.255,.315,.431,.747,.333,3.5,28.7,7.0,87.9,43.8,24.5,38.7,27.4,0.64,0.0,0.0,0.4,1,2.16]))
Brewers10 = input(np.array([29,16,1,4.56,45,1673,1487,205,351,68,5,58,197,30,11,152,396,.236,.312,.406,.718,28,27,.983,29.7,40.0,.243,.335,.361,.696,.258,2.4,13.1,11.3,90.1,47.2,17.6,57.6,20.0,1.38,0.3,0.2,5.0,0,2.16]))
Angels10 = input(np.array([27,19,2,4.72,46,1713,1531,217,380,70,5,60,209,26,13,153,418,.248,.320,.418,.738,24,38,.986,28.4,50.0,.197,.249,.298,.546,.239,1.6,22.3,4.7,86.9,29.9,27.7,37.2,24.1,0.60,1.7,1.2,15.1,1,-1.28]))
BlueJays10 = input(np.array([24,20,3,3.73,44,1606,1441,164,334,68,2,48,163,16,10,127,357,.232,.301,.382,.682,18,32,.988,27.0,10.1,.189,.286,.378,.664,.200,4.7,23.3,9.3,87.0,35.7,21.4,50.0,21.4,1.08,0.2,0.2,2.1,0,-1.28]))
Dbacks10 = input(np.array([23,23,4,3.96,46,1690,1494,182,323,65,5,57,171,18,9,168,425,.216,.299,.381,.680,36,38,.978,27.2,7.0,.125,.364,.250,.614,.133,3.0,24.2,24.2,86.5,43.8,12.5,25.0,50.0,0.33,0.0,0.0,0.5,1,-5.17]))
Dodgers10 = input(np.array([30,14,1,5.68,44,1704,1491,250,379,92,9,50,233,27,5,190,358,.254,.340,.429,.769,21,43,.987,29.7,42.1,.209,.273,.373,.647,.218,3.5,16.2,8.1,88.4,41.2,18.3,38.9,31.3,0.65,0.1,0.0,4.3,0,-5.17]))
Athletics10 = input(np.array([19,28,4,3.36,47,1681,1520,158,321,72,7,30,146,31,6,124,408,.211,.276,.327,.603,30,45,.982,28.7,28.0,.252,.319,.364,.684,.316,1.7,22.7,8.4,89.3,44.4,23.5,44.4,23.5,0.82,-0.2,-0.1,-2.0,1,0]))
Rangers10 = input(np.array([20,23,3,4.07,43,1568,1427,175,317,48,4,46,162,31,9,119,365,.222,.285,.358,.643,26,38,.983,29.3,33.2,.254,.307,.423,.730,.272,3.6,15.6,6.4,87.2,39.4,22.9,45.0,25.7,0.83,0.5,0.3,5.0,0,0]))
Padres10 = input(np.array([28,16,2,4.32,44,1681,1474,190,341,69,8,32,182,20,9,162,370,.231,.312,.354,.667,15,37,.991,28.7,40.2,.216,.290,.307,.597,.265,1.2,20.1,8.9,87.3,39.3,24.4,47.1,26.9,0.89,0.6,0.3,5.0,1,1.17]))
Pirates10 = input(np.array([18,25,3,3.40,43,1556,1398,146,314,59,9,34,135,17,10,139,376,.225,.296,.353,.649,36,32,.977,27.4,49.0,.215,.276,.376,.652,.264,3.5,27.6,8.0,91.0,42.5,19.5,39.1,30.5,0.64,0.4,-0.1,3.8,0,1.17]))
Mariners10 = input(np.array([18,27,4,3.96,45,1694,1500,178,351,61,6,47,172,22,10,162,381,.234,.315,.377,.692,21,34,.987,26.9,51.2,.161,.205,.236,.441,.197,2.2,26.3,4.8,87.4,38.1,18.9,40.2,29.9,0.68,2.0,1.4,19.6,1,2.99]))
Astros10 = input(np.array([29,16,1,4.22,45,1664,1477,190,342,74,5,59,185,22,6,157,348,.232,.309,.408,.717,19,34,.988,29.7,43.1,.278,.339,.491,.830,.292,4.8,16.6,8.0,90.8,47.1,21.4,35.0,35.0,0.56,0.0,0.1,0.5,0,2.99]))

a10 = [Reds10 ,
Giants10 ,
Nationals10 ,
Rockies10 ,
RedSox10 ,
Orioles10 ,
Tigers10 ,
Guardians10 ,
Mets10 ,
Phillies10 ,
Rays10 ,
Yankees10 ,
Braves10 ,
Marlins10 ,
Twins10 ,
Royals10 ,
Cardinals10 ,
Brewers10 ,
Angels10 ,
BlueJays10 ,
Dbacks10 ,
Dodgers10 ,
Athletics10 ,
Rangers10 ,
Padres10 ,
Pirates10 ,
Mariners10,
Astros10 ]

b10 = ['Reds10' ,
'Giants10' ,
'Nationals10' ,
'Rockies10' ,
'RedSox10' ,
'Orioles10' ,
'Tigers10' ,
'Guardians10' ,
'Mets10' ,
'Phillies10' ,
'Rays10' ,
'Yankees10' ,
'Braves10' ,
'Marlins10' ,
'Twins10' ,
'Royals10' ,
'Cardinals10' ,
'Brewers10' ,
'Angels10' ,
'BlueJays10' ,
'Dbacks10' ,
'Dodgers10' ,
'Athletics10' ,
'Rangers10' ,
'Padres10' ,
'Pirates10' ,
'Mariners10' ,
'Astros10' ]

Nationals11 = input(np.array([16,30,5,3.91,46,1706,1534,180,386,74,4,27,171,15,7,133,332,.252,.316,.358,.673,33,36,.980,29.6,41.2,.231,.303,.378,.681,.260,2.3,17.7,9.7,90.6,42.5,29.1,41.7,20.5,0.72,0.4,0.3,3.1,1,-2.0]))
Rockies11 = input(np.array([20,24,5,4.57,44,1659,1496,201,391,72,7,41,189,9,8,127,337,.261,.325,.401,.726,34,51,.979,29.6,41.1,.270,.388,.460,.848,.315,2.6,17.9,13.8,88.1,38.0,25.6,45.7,26.4,0.87,-1.1,-0.4,-10.9,0,-2.0]))
Twins11 = input(np.array([28,18,1,4.33,46,1724,1515,199,376,79,3,45,190,10,7,169,381,.248,.328,.393,.721,21,34,.987,27.0,19.2,.211,.263,.296,.559,.269,1.3,23.7,5.3,89.0,41.5,20.8,58.5,15.1,1.41,0.9,0.2,6.6,1,-0.73]))
Royals11 = input(np.array([15,29,5,3.77,44,1644,1490,166,353,66,11,34,155,28,8,130,332,.237,.301,.364,.665,19,42,.988,28.6,30.1,.224,.321,.440,.761,.241,4.5,20.9,11.9,88.2,40.4,27.0,33.7,34.8,0.51,-0.1,-0.1,0.3,0,-0.73]))
Cardinals11 = input(np.array([25,20,2,4.78,45,1713,1535,215,387,81,6,43,207,38,5,144,329,.252,.322,.397,.719,21,45,.988,29.3,42.1,.219,.300,.313,.613,.272,0.6,19.4,10.6,86.7,36.0,26.2,48.4,15.1,0.97,0.3,0.2,1.5,1,0.87]))
Brewers11 = input(np.array([29,17,1,4.50,46,1710,1520,207,359,68,5,59,199,30,12,156,404,.236,.312,.404,.716,29,28,.982,29.7,4.2,.350,.409,.700,1.109,.375,4.6,13.6,9.1,88.9,52.9,29.4,35.3,29.4,0.55,-0.2,-0.1,-1.9,0,0.87]))
Athletics11 = input(np.array([19, 29, 5, 3.40, 48, 1715, 1551, 163, 326, 73, 7, 32, 150, 32, 6, 127,
          417, .210, .275, .328, .603, 30, 47, .983, 28.8, 34.1, .288, .375, .504, .879,
          .337, 3.8, 20.6, 11.3, 91.5, 47.7, 29.9, 40.2, 26.2, 0.69, -0.5, -0.3, -3.9, 1,-2.82]))
Rangers11 = input(np.array([21, 23, 3, 4.16, 44, 1606, 1464, 183, 331, 50, 4, 46, 170, 33, 9, 120,
        373, .226, .287, .360, .647, 27, 39, .983, 29.3, 22.1, .253, .330, .494, .824,
        .274, 5.1, 20.4, 9.2, 90.4, 47.1, 17.6, 26.5, 41.2, 0.37, -0.4, -0.1, -0.9, 0,-2.82]))
Braves11 = input(np.array([22, 24, 2, 4.15, 46, 1701, 1524, 191, 353, 81, 1, 57, 178, 22, 6, 146, 449,
       .232, .303, .398, .702, 23, 30, .986, 28.5, 59.2, .201, .288, .311, .599, .242,
       1.7, 20.8, 9.3, 85.6, 33.8, 16.1, 50.3, 20.5, 1.03, 1.6, 0.8, 11.3, 1,3.63]))
Marlins11 = input(np.array([18, 25, 4, 4.09, 43, 1611, 1441, 176, 348, 67, 9, 43, 167, 19, 7, 133,
        391, .241, .313, .390, .703, 23, 34, .985, 29.5, 10.1, .279, .415, .372, .787,
        .333, 0.0, 13.2, 17.0, 85.4, 30.6, 25.0, 41.7, 22.2, 0.75, 0.0, 0.0, -4.1, 0,3.63]))
Rays11 = input(np.array([26, 19, 2, 4.24, 45, 1655, 1509, 191, 357, 71, 8, 46, 180, 34, 12, 124, 384,
     .237, .298, .386, .683, 29, 28, .982, 27.1, 51.2, .218, .265, .360, .626, .285,
     2.8, 29.4, 5.7, 89.2, 41.5, 25.7, 42.6, 25.7, 0.74, 0.6, 0.4, 7.5, 1,3.7]))
Yankees11 = input(np.array([33, 13, 1, 4.72, 46, 1722, 1518, 217, 362, 61, 2, 65, 201, 24, 7, 167,
        378, .238, .318, .410, .728, 19, 30, .989, 30.6, 38.2, .275, .325, .425, .750,
        .330, 3.0, 22.3, 4.8, 87.4, 38.5, 26.5, 39.3, 25.6, 0.65, 0.1, 0.0, -0.1, 0,3.7]))
Tigers11 = input(np.array([16, 28, 4, 2.77, 44, 1570, 1426, 122, 314, 56, 5, 25, 119, 9, 5, 116, 379,
       .220, .285, .319, .604, 23, 36, .985, 28.9, 45.2, .247, .307, .385, .692, .315,
       2.1, 24.1, 7.3, 89.9, 42.3, 26.9, 41.5, 23.8, 0.72, 0.5, 0.3, 4.1, 1,-2.11]))
Guardians11 = input(np.array([18, 23, 3, 4.49, 41, 1541, 1389, 184, 336, 69, 10, 36, 178, 22, 7, 125,
          303, .242, .307, .384, .691, 24, 32, .984, 26.2, 21.0, .278, .326, .443, .769,
          .302, 3.5, 16.3, 7.0, 90.6, 40.9, 24.2, 39.4, 28.8, 0.67, 0.3, 0.1, 3.3, 0,-2.11]))
Mets11 = input(np.array([30, 17, 1, 4.89, 47, 1796, 1589, 230, 415, 77, 11, 40, 219, 22, 8, 151, 354,
     .261, .333, .399, .732, 18, 33, .989, 30.0, 37.0, .245, .283, .378, .661, .302,
     2.0, 23.0, 4.6, 83.2, 27.8, 20.2, 46.8, 27.5, 0.88, 0.0, 0.0, 2.7, 1,1.03]))
Phillies11 = input(np.array([21, 25, 3, 4.57, 46, 1721, 1551, 210, 387, 79, 7, 52, 199, 27, 3, 135,
         414, .250, .314, .410, .724, 29, 39, .982, 28.9, 30.0, .232, .289, .348, .637,
         .261, 1.7, 14.9, 7.4, 90.2, 39.4, 21.3, 50.0, 23.4, 1.00, 0.7, 0.5, 5.3, 0,1.03]))
Dbacks11 = input(np.array([23, 24, 4, 3.96, 47, 1731, 1527, 186, 332, 67, 5, 57, 175, 18, 9, 172,
        432, .217, .301, .380, .681, 37, 39, .978, 27.2, 39.0, .164, .257, .269, .525,
        .200, 2.0, 24.3, 10.5, 86.4, 23.7, 20.4, 46.9, 24.5, 0.90, 1.1, 0.8, 12.0, 1,-4.72]))
Dodgers11 = input(np.array([31, 14, 1, 5.69, 45, 1741, 1525, 256, 387, 92, 10, 53, 239, 28, 5, 193,
        362, .254, .339, .431, .771, 21, 45, .987, 29.7, 49.0, .246, .316, .358, .674,
        .308, 1.0, 20.3, 8.7, 87.6, 34.2, 25.3, 40.4, 28.1, 0.69, 0.6, 0.2, 4.5, 0,-4.72]))
Angels11 = input(np.array([27, 20, 2, 4.68, 47, 1748, 1566, 220, 387, 71, 5, 62, 212, 27, 13, 153,
       432, .247, .318, .418, .735, 25, 41, .985, 28.4, 36.1, .178, .305, .357, .662,
       .221, 2.6, 25.8, 14.8, 91.3, 45.1, 20.9, 47.3, 23.1, 0.91, 0.3, 0.2, 2.7, 1,-1.53]))
BlueJays11 = input(np.array([25, 20, 3, 3.73, 45, 1643, 1475, 168, 345, 71, 2, 48, 165, 17, 10, 129,
          364, .234, .302, .382, .684, 21, 32, .987, 27.0, 41.1, .211, .284, .327, .610,
          .237, 2.5, 17.9, 8.0, 87.4, 36.4, 16.9, 55.1, 22.0, 1.25, 0.9, 0.6, 8.0, 0,-1.53]))
Padres11 = input(np.array([29, 16, 2, 4.31, 45, 1713, 1503, 194, 348, 69, 8, 33, 186, 20, 9, 166, 377,
       .232, .313, .354, .667, 15, 37, .991, 28.7, 42.2, .222, .312, .365, .677, .278,
       2.7, 24.9, 11.1, 87.8, 36.4, 24.2, 42.5, 25.8, 0.74, -0.7, -0.4, -6.0, 1,1.76]))
Pirates11 = input(np.array([18, 26, 3, 3.39, 44, 1590, 1428, 149, 318, 61, 9, 35, 138, 17, 10, 142,
        382, .223, .295, .352, .646, 37, 33, .977, 27.3, 52.0, .211, .252, .342, .595,
        .265, 2.0, 25.1, 4.4, 86.3, 36.4, 24.3, 44.3, 22.9, 0.81, 1.2, 0.8, 10.7, 0,1.76]))
Mariners11 = input(np.array([19, 27, 4, 4.00, 46, 1730, 1534, 184, 361, 62, 6, 51, 178, 22, 10, 164,
         387, .235, .316, .383, .699, 21, 35, .987, 26.9, 40.1, .310, .331, .500, .831,
         .341, 4.0, 17.1, 2.9, 90.9, 48.9, 25.9, 36.0, 27.3, 0.57, 0.5, 0.3, 2.0, 1,3.13]))
Astros11 = input(np.array([29, 17, 1, 4.15, 46, 1700, 1512, 191, 351, 75, 5, 59, 186, 23, 6, 159, 356,
       .232, .308, .405, .714, 20, 34, .988, 29.7, 52.0, .206, .281, .323, .604, .262,
       2.4, 26.2, 8.6, 90.3, 47.0, 29.6, 36.3, 25.9, 0.57, 0.6, 0.4, 9.5, 0,3.13]))

b11 = ['Nationals11',
'Rockies11',
'Twins11',
'Royals11',
'Cardinals11',
'Brewers11',
'Athletics11',

'Rangers11',

'Braves11',

'Marlins11',

'Rays11',

'Yankees11',

'Tigers11',

'Guardians11',

'Mets11',

'Phillies11',

'Dbacks11',

'Dodgers11',

'Angels11',

'BlueJays11',

'Padres11',

'Pirates11',

'Mariners11',

'Astros11']


a11 = [Nationals11,
Rockies11,
Twins11,
Royals11,
Cardinals11,
Brewers11,
Athletics11,

Rangers11,

Braves11,

Marlins11,

Rays11,

Yankees11,

Tigers11,

Guardians11,

Mets11,

Phillies11,

Dbacks11,

Dodgers11,

Angels11,

BlueJays11,

Padres11,

Pirates11,

Mariners11,

Astros11]

total = []
for i in range(5):
	total.append(0)
div = 0
LR = .005 * .0008


def back(x, y, weights, bias):
	LR = .005 * .0008
	actual = relu(np.dot(x, weights) + bias)
	
	weights -= np.reshape(derivativeWeights(x, weights, actual, bias, y),
	                      (45, 1)) * LR
	bias -= derivativeBias(x, weights, actual, bias, y)


for i in range(5):
	print('start')
	weights = np.random.rand(45, 1)
	counter = 0
	for i in weights:
		counter += 1
		g = random.randint(0, 1)
		weights[counter - 1] += 1
		if g == 1:
			weights[counter - 1] = weights[counter - 1] * -1
	
	bias = 7
	
	for j in range(200000):
		print(j)
		"""actual = relu(np.dot(brewersRuns, weights) + bias)
		
		weights = weights - np.reshape(derivativeWeights(brewersRuns, weights, actual, bias, 2),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(brewersRuns, weights, actual, bias, 2) * LR
		
		actual = relu(np.dot(marlinsRuns, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(marlinsRuns, weights, actual, bias, 1),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(marlinsRuns, weights, actual, bias, 1) * LR
		
		actual = relu(np.dot(redsRuns, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(redsRuns, weights, actual, bias, 8),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(redsRuns, weights, actual, bias, 8) * LR
		
		actual = relu(np.dot(piratesRuns, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(piratesRuns, weights, actual, bias, 2),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(piratesRuns, weights, actual, bias, 2) * LR
		
		actual = relu(np.dot(astrosRuns, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(astrosRuns, weights, actual, bias, 6),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(astrosRuns, weights, actual, bias, 6) * LR
		
		actual = relu(np.dot(nationalsRuns, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(nationalsRuns, weights, actual, bias, 1),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(nationalsRuns, weights, actual, bias, 1) * LR
		
		actual = relu(np.dot(marlinsRuns2, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(marlinsRuns2, weights, actual, bias, 3),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(marlinsRuns2, weights, actual, bias, 3) * LR
		
		actual = relu(np.dot(nationalsRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(nationalsRuns3, weights, actual, bias, 2),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(nationalsRuns3, weights, actual, bias, 2) * LR
		
		actual = relu(np.dot(marlinsRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(marlinsRuns3, weights, actual, bias, 8),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(marlinsRuns3, weights, actual, bias, 8) * LR
		
		actual = relu(np.dot(tigersRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(tigersRuns3, weights, actual, bias, 3),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(tigersRuns3, weights, actual, bias, 3) * LR
		
		actual = relu(np.dot(raysRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(raysRuns3, weights, actual, bias, 2),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(raysRuns3, weights, actual, bias, 2) * LR
		
		actual = relu(np.dot(yankeesRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(yankeesRuns3, weights, actual, bias, 6),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(yankeesRuns3, weights, actual, bias, 6) * LR
		
		actual = relu(np.dot(oriolesRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(oriolesRuns3, weights, actual, bias, 2),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(oriolesRuns3, weights, actual, bias, 2) * LR
		
		actual = relu(np.dot(marinersRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(marinersRuns3, weights, actual, bias, 2),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(marinersRuns3, weights, actual, bias, 2) * LR
		
		actual = relu(np.dot(blueJaysRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(blueJaysRuns3, weights, actual, bias, 6),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(blueJaysRuns3, weights, actual, bias, 6) * LR
		
		actual = relu(np.dot(astrosRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(astrosRuns3, weights, actual, bias, 3),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(astrosRuns3, weights, actual, bias, 3) * LR
		
		actual = relu(np.dot(redSoxRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(redSoxRuns3, weights, actual, bias, 6),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(redSoxRuns3, weights, actual, bias, 6) * LR
		
		actual = relu(np.dot(cardinalsRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(cardinalsRuns3, weights, actual, bias, 3),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(cardinalsRuns3, weights, actual, bias, 3) * LR

		actual = relu(np.dot(metsRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(metsRuns3, weights, actual, bias, ),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(metsRuns3, weights, actual, bias, 3) * LR
		actual = relu(np.dot(bravesRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(bravesRuns3, weights, actual, bias, 0),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(bravesRuns3, weights, actual, bias, 0) * LR
		
		actual = relu(np.dot(brewersRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(brewersRuns3, weights, actual, bias, 1),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(brewersRuns3, weights, actual, bias, 1) * LR
		
		actual = relu(np.dot(piratesRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(piratesRuns3, weights, actual, bias, 0),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(piratesRuns3, weights, actual, bias, 0) * LR
		
		actual = relu(np.dot(cubsRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(cubsRuns3, weights, actual, bias, 9),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(cubsRuns3, weights, actual, bias, 9) * LR
		
		actual = relu(np.dot(angelsRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(angelsRuns3, weights, actual, bias, 4),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(angelsRuns3, weights, actual, bias, 4) * LR
		
		actual = relu(np.dot(rangersRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(rangersRuns3, weights, actual, bias, 7),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(rangersRuns3, weights, actual, bias, 7) * LR
		
		actual = relu(np.dot(giantsRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(giantsRuns3, weights, actual, bias, 7),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(giantsRuns3, weights, actual, bias, 7) * LR
		
		actual = relu(np.dot(rockiesRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(rockiesRuns3, weights, actual, bias, 6),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(rockiesRuns3, weights, actual, bias, 6) * LR
		
		actual = relu(np.dot(twinsRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(twinsRuns3, weights, actual, bias, 3),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(twinsRuns3, weights, actual, bias, 3) * LR
		
		actual = relu(np.dot(athleticsRuns3, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(athleticsRuns3, weights, actual, bias, 1),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(athleticsRuns3, weights, actual, bias, 1) * LR
		
		actual = relu(np.dot(blueJays, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(blueJays, weights, actual, bias, 3),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(blueJays, weights, actual, bias, 3) * LR
		
		actual = relu(np.dot(mariners, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(mariners, weights, actual, bias, 0),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(mariners, weights, actual, bias, 0) * LR
		
		actual = relu(np.dot(yankees, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(yankees, weights, actual, bias, 5),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(yankees, weights, actual, bias, 5) * LR
		
		actual = relu(np.dot(orioles, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(orioles, weights, actual, bias, 4),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(orioles, weights, actual, bias, 4) * LR
		
		actual = relu(np.dot(padres, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(padres, weights, actual, bias, 3),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(padres, weights, actual, bias, 3) * LR
		
		actual = relu(np.dot(phillies, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(phillies, weights, actual, bias, 0),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(phillies, weights, actual, bias, 0) * LR
		
		actual = relu(np.dot(marlins, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(marlins, weights, actual, bias, 5),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(marlins, weights, actual, bias, 5) * LR
		
		actual = relu(np.dot(nationals, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(nationals, weights, actual, bias, 1),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(nationals, weights, actual, bias, 1) * LR
		
		actual = relu(np.dot(reds, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(reds, weights, actual, bias, 5),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(reds, weights, actual, bias, 5) * LR
		actual = relu(np.dot(guardians, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(guardians, weights, actual, bias, 4),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(guardians, weights, actual, bias, 4) * LR
		
		actual = relu(np.dot(twins2, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(twins2, weights, actual, bias, 14),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(twins2, weights, actual, bias, 14) * LR
		
		actual = relu(np.dot(athletics2, weights) + bias)
		weights = weights - np.reshape(derivativeWeights(athletics2, weights, actual, bias, 4),
		                               (45, 1)) * LR
		bias -= 10 * derivativeBias(athletics2, weights, actual, bias, 4) * LR
		
		back(diamondbacks2, 3, weights, bias)
		back(dodgers2, 5, weights, bias)
		back(yankees2, 3, weights, bias)
		back(orioles2, 2, weights, bias)
		back(whiteSox2, 2, weights, bias)
		back(royals2, 6, weights, bias)
		back(tigers2, 1, weights, bias)
		back(rays2, 6, weights, bias)
		
		back(mariners3, 6, weights, bias)
		back(redSox3, 12, weights, bias)
		back(whiteSox3, 7, weights, bias)
		back(royals3, 4, weights, bias)
		back(rangers3, 1, weights, bias)
		back(astros3, 5, weights, bias)
		back(diamondbacks3, 3, weights, bias)
		back(cubs3, 1, weights, bias)
		
		back(mariners4, 3, weights, bias)
		back(redSox4, 7, weights, bias)
		back(twins4, 6, weights, bias)
		back(royals4, 4, weights, bias)
		back(tigers4, 1, weights, bias)
		back(guardians4, 6, weights, bias)
		
		back(tigers6, 4, weights, bias)
		back(guardians6, 2, weights, bias)
		back(padres6, 10, weights, bias)
		back(giants6, 1, weights, bias)
		back(Pirate6, 2, weights, bias)
		back(Rockie6, 1, weights, bias)
		back(Red6, 4, weights, bias)
		back(Cubs6, 7, weights, bias)
		back(Yankees6, 4, weights, bias)
		back(Orioles6, 6, weights, bias)
		back(Nationals6, 1, weights, bias)
		back(Dodgers6, 10, weights, bias)
		back(Braves6, 3, weights, bias)
		back(Phillies6, 7, weights, bias)
		back(Twins6, 5, weights, bias)
		back(Tigers6, 4, weights, bias)
		back(Cardinals6, 7, weights, bias)
		back(BlueJays6, 3, weights, bias)
		back(Dbacks6, 9, weights, bias)
		back(Royals6, 5, weights, bias)
		back(Padres6, 3, weights, bias)
		back(Brewers6, 2, weights, bias)
		back(Mariners6, 7, weights, bias)
		back(Athletics6, 6, weights, bias)
		back(Giants6, 3, weights, bias)
		back(Mets6, 13, weights, bias)
		back(Reds7, 4, weights, bias)
		back(Cubs7, 11, weights, bias)

		back(Rays7, 4, weights, bias)
		back(Marlins7, 0, weights, bias)
		
		back(Yankees7, 7, weights, bias)
		back(Orioles7, 6, weights, bias)
		
		back(Nationals7, 4, weights, bias)
		back(Dodgers7, 9, weights, bias)
		
		back(Braves7, 6, weights, bias)
		back(Phillies7, 5, weights, bias)
		
		back(Twins7, 2, weights, bias)
		back(Tigers7, 0, weights, bias)
		
		back(Cardinals7, 1, weights, bias)
		back(BlueJays7, 8, weights, bias)
		
		back(WhiteSox7, 3, weights, bias)
		back(RedSox7, 16, weights, bias)
		
		back(Astros7, 7, weights, bias)
		back(Guardians7, 3, weights, bias)
		
		back(Angels7, 5, weights, bias)
		back(Rangers7, 3, weights, bias)
		
		back(Dbacks7, 6, weights, bias)
		back(Royals7, 8, weights, bias)
		
		back(Padres7, 1, weights, bias)
		back(Brewers7, 4, weights, bias)
		
		back(Mariners7, 5, weights, bias)
		back(Athletics7, 7, weights, bias)
		
		back(Giants7, 13, weights, bias)
		back(Mets7, 12, weights, bias)
	
		back(Nationals8, 1, weights, bias)
		back(Dodgers8, 0, weights, bias)
		back(Padres8, 1, weights, bias)
		back(Brewers8, 2, weights, bias)
		back(Mariners8, 2, weights, bias)
		back(Athletics8, 4, weights, bias)
		back(Reds8, 4, weights, bias)
		back(Cubs8, 3, weights, bias)
		back(Rays8, 5, weights, bias)
		back(Marlins8, 4, weights, bias)
		back(Yankees8, 2, weights, bias)
		back(Orioles8, 0, weights, bias)
		back(Braves8, 8, weights, bias)
		back(Phillies8, 4, weights, bias)
		back(WhiteSox8, 3, weights, bias)
		back(RedSox8, 1, weights, bias)
		back(Astros8, 2, weights, bias)
		back(Guardians8, 1, weights, bias)
		back(Angels8, 2, weights, bias)
		back(Rangers8, 7, weights, bias)
		
		back(Reds9, 20, weights, bias)
		back(Cubs9, 5, weights, bias)
		back(Rays9, 2, weights, bias)
		back(Yankees9, 7, weights, bias)
		back(Nationals9, 7, weights, bias)
		back(Rockies9, 3, weights, bias)
		back(Tigers9, 4, weights, bias)
		back(Guardians9, 3, weights, bias)
		back(Braves9, 1, weights, bias)
		back(Phillies9, 4, weights, bias)
		back(Twins9, 2, weights, bias)
		back(Royals9, 3, weights, bias)
		back(Cardinals9, 3, weights, bias)
		back(Brewers9, 4, weights, bias)
		back(WhiteSox9, 7, weights, bias)
		back(RedSox9, 16, weights, bias)
		back(Angels9, 3, weights, bias)
		back(BlueJays9, 6, weights, bias)
		back(Dbacks9, 1, weights, bias)
		back(Dodgers9, 14, weights, bias)
		back(Athletics9, 1, weights, bias)
		back(Rangers9, 4, weights, bias)
		print(weights, bias)
		"""
		back(Reds10, 5, weights, bias)
		back(Giants10, 1, weights, bias)
		back(RedSox10, 8, weights, bias)
		back(Orioles10, 12, weights, bias)
		back(Mets10, 8, weights, bias)
		back(Phillies10, 6, weights, bias)
		back(Rays10, 0, weights, bias)
		back(Yankees10, 2, weights, bias)
		back(Braves10, 6, weights, bias)
		back(Marlins10, 4, weights, bias)
		back(Twins10, 10, weights, bias)
		back(Royals10, 7, weights, bias)
		back(Cardinals10, 4, weights, bias)
		back(Brewers10, 2, weights, bias)
		back(Angels10, 3, weights, bias)
		back(BlueJays10, 4, weights, bias)
		back(Dbacks10, 4, weights, bias)
		back(Dodgers10, 6, weights, bias)
		back(Athletics10, 5, weights, bias)
		back(Rangers10, 8, weights, bias)
		back(Padres10, 4, weights, bias)
		back(Pirates10, 3, weights, bias)
		back(Mariners10, 1, weights, bias)
		back(Astros10, 6, weights, bias)
		predict = True
		print(weights, bias)
		"""counter = 0
		for k in a7:
			counter += 1
			if counter % 2 != 0:
				print(b7[counter - 1] + b7[counter] + str(
					relu(np.dot(a7[counter - 1], weights) + bias) + relu(np.dot(a7[counter], weights) + bias)))
				if relu(np.dot(a7[counter - 1], weights) + bias) + relu(np.dot(a7[counter], weights) + bias) == 0:
					predict = False"""
		
		if predict:
			counter = 0
			for k in a11:
				counter += 1
				if counter % 2 != 0:
					print(b11[counter - 1] + b11[counter] + str(
						relu(np.dot(a11[counter - 1], weights) + bias) + relu(np.dot(a11[counter], weights) + bias)))
				
